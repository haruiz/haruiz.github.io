"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[239],{1930:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var o=a(7462),n=(a(7294),a(3905));const r={slug:"package-manager-tools-for-python",title:"Package manager tools for Python",authors:["haruiz"],tags:["python","package manager","tools"]},s=void 0,i={permalink:"/blog/package-manager-tools-for-python",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-07-29T18:34:13.162Z-Package-manager-tools-for-Python.md",source:"@site/blog/2022-07-29T18:34:13.162Z-Package-manager-tools-for-Python.md",title:"Package manager tools for Python",description:"A package manager is a software tool that automates the process of installing, upgrading, configuring, and removing computer programs/libraries from our machines. For python specifically, we have different alternatives, such as conda, virtualenv, pip, etc.  The video below provides us more information about these kind of tools, and highlight the aspects that we should consider when choosing the most appropriate:",date:"2022-07-29T00:00:00.000Z",formattedDate:"July 29, 2022",tags:[{label:"python",permalink:"/blog/tags/python"},{label:"package manager",permalink:"/blog/tags/package-manager"},{label:"tools",permalink:"/blog/tags/tools"}],readingTime:2.14,hasTruncateMarker:!0,authors:[{name:"Henry Ruiz",title:"Blog Author",url:"https://github.com/haruiz",imageURL:"https://github.com/haruiz.png",key:"haruiz"}],frontMatter:{slug:"package-manager-tools-for-python",title:"Package manager tools for Python",authors:["haruiz"],tags:["python","package manager","tools"]}},l={authorsImageUrls:[void 0]},p=[],u={toc:p};function c(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,o.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"A package manager is a software tool that automates the process of installing, upgrading, configuring, and removing computer programs/libraries from our machines. For python specifically, we have different alternatives, such as conda, virtualenv, pip, etc. "," The video below provides us more information about these kind of tools, and highlight the aspects that we should consider when choosing the most appropriate:"),(0,n.kt)("p",{align:"center"},(0,n.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/3J02sec99RM",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0})),"In particular, this blog post will show how to use poetry, an open-source packaging-dependency management tool that gives us all we need to create, build, and publish our python applications.",(0,n.kt)("p",null,"So lets started!!."),(0,n.kt)("p",null,"First, we need to install pyenv, a command-line tool that enables us to run multiple python versions in our development machines. It is extremely useful since sometimes we need to check if there are any compatibility issues across different versions. If you come from a javascript background, pyenv is quite similar to NVM( Node version manager). I will explain how to do this in Ubuntu, but you can find the instruction for windows in the Github repository. In general, this process is straight-forward:"),(0,n.kt)("p",null,"Run the install command:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"curl https://pyenv.run | bash\n")),(0,n.kt)("p",null,"Then, restart your shell, so the path changes take effect:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"exec $SHELL\n")),(0,n.kt)("p",null,"You can now start using pyenv."),(0,n.kt)("p",null,"install python 2.7, 3.8 and 3.7 in the same machine:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"pyenv install 2.7.15 3.8.0 3.7.0\n")),(0,n.kt)("p",null,"Activate Python 2.7 on the current folder"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"pyenv local 2.7.15\n")),(0,n.kt)("p",null,"Another essential aspect of the development process is the scaffolding. Sometimes, it is tricky to determine the best folder structure for our projects. Here it\u2019s where poetry comes to the rescue. With a few commands, we can create our project, install and remove dependencies, and perform other actions such as building and packaging our software. For create our new projects, we just execute the next command in the terminal:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"poetry new mypackage\n")),(0,n.kt)("p",null,"Then we install the initial dependencies and set up our project using the pyenv environment previously activated:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"poetry install\n")),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"Building our project and publishing it is just running the ",(0,n.kt)("inlineCode",{parentName:"p"},"poetry build")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"poetry publish")," commands, so it is pretty intuitive. The publish command will submit our application to pip, so other developers can easily install it.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Some useful resource")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://python-poetry.org/"},"Poetry Documentation")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/pyenv/pyenv"},"Pyenv Documentation")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=QX_Nhu1zhlg&ab_channel=PyGotham2019"},"Great talk about poetry"))),(0,n.kt)("p",null,"If you enjoyed this post, I\u2019d be very grateful if you\u2019d help it spread by emailing it to a friend, or sharing it on Twitter or Facebook.\nThank you!"))}c.isMDXComponent=!0}}]);