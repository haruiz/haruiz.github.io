"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5333],{21588:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>l,frontMatter:()=>r,metadata:()=>a,toc:()=>g});var a=i(98955),n=i(74848),s=i(28453);const r={title:"Building a RAG System with PostgreSQL, pgvector, SQLAlchemy, and Gemma/Gemini Embeddings",slug:"building-a-rag-system-with-postgresql-pgvector-sqlalchemy-gemma-gemini-embeddings",description:"In this post, we build a Retrieval-Augmented Generation (RAG) pipeline from the ground up. Starting with synthetic data generated by Gemini, we create embeddings with both Gemini and Gemma, store them in PostgreSQL with pgvector, and query them through SQLAlchemy. We also visualize the embedding space interactively to reveal semantic structure. Along the way, we demonstrate how semantic search goes beyond keywords and showcase a multi-agent system that automates dataset generation.",authors:["haruiz"],image:"https://haruiz.github.io/img/building-a-rag-system-with-postgresql-pgvector-sqlalchemy-gemma-gemini-embeddings.png",tags:["RAG","data-science"]},o=void 0,m={authorsImageUrls:[void 0]},g=[];function d(e){return(0,n.jsx)(n.Fragment,{})}function l(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d()}},28453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>o});var a=i(96540);const n={},s=a.createContext(n);function r(e){const t=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),a.createElement(s.Provider,{value:t},e.children)}},98955:e=>{e.exports=JSON.parse('{"permalink":"/blog/building-a-rag-system-with-postgresql-pgvector-sqlalchemy-gemma-gemini-embeddings","source":"@site/blog/2025-09-13-building-a-rag-system-with-postgrespgvector-+-gemmagemini-embeddings/index.mdx","title":"Building a RAG System with PostgreSQL, pgvector, SQLAlchemy, and Gemma/Gemini Embeddings","description":"In this post, we build a Retrieval-Augmented Generation (RAG) pipeline from the ground up. Starting with synthetic data generated by Gemini, we create embeddings with both Gemini and Gemma, store them in PostgreSQL with pgvector, and query them through SQLAlchemy. We also visualize the embedding space interactively to reveal semantic structure. Along the way, we demonstrate how semantic search goes beyond keywords and showcase a multi-agent system that automates dataset generation.","date":"2025-09-13T00:00:00.000Z","tags":[{"inline":true,"label":"RAG","permalink":"/blog/tags/rag"},{"inline":true,"label":"data-science","permalink":"/blog/tags/data-science"}],"readingTime":33.4,"hasTruncateMarker":true,"authors":[{"name":"Henry Ruiz","title":"Blog Author","url":"https://github.com/haruiz","imageURL":"https://github.com/haruiz.png","key":"haruiz","page":null}],"frontMatter":{"title":"Building a RAG System with PostgreSQL, pgvector, SQLAlchemy, and Gemma/Gemini Embeddings","slug":"building-a-rag-system-with-postgresql-pgvector-sqlalchemy-gemma-gemini-embeddings","description":"In this post, we build a Retrieval-Augmented Generation (RAG) pipeline from the ground up. Starting with synthetic data generated by Gemini, we create embeddings with both Gemini and Gemma, store them in PostgreSQL with pgvector, and query them through SQLAlchemy. We also visualize the embedding space interactively to reveal semantic structure. Along the way, we demonstrate how semantic search goes beyond keywords and showcase a multi-agent system that automates dataset generation.","authors":["haruiz"],"image":"https://haruiz.github.io/img/building-a-rag-system-with-postgresql-pgvector-sqlalchemy-gemma-gemini-embeddings.png","tags":["RAG","data-science"]},"unlisted":false,"nextItem":{"title":"Accelerating Science with JAX - Simulations, Physics, and Beyond","permalink":"/blog/accelerating-science-with-jax-simulations-physics-and-beyond"}}')}}]);