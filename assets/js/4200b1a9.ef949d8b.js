"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[866],{4612:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"python-for-data-science-part-getting-started","metadata":{"permalink":"/blog/python-for-data-science-part-getting-started","source":"@site/blog/2022-08-27-python-for-data-science-getting-started/index.md","title":"Python for Data Science - Getting started","description":"Thinking about jumping into a data science role, but you don\'t know why you should learn how to program and which programming language to choose? In this post, I will show you how to use python and discuss why this programming language is considered one of the top used in data science.","date":"2022-08-27T00:00:00.000Z","formattedDate":"August 27, 2022","tags":[{"label":"python","permalink":"/blog/tags/python"},{"label":"data-science","permalink":"/blog/tags/data-science"}],"readingTime":5.955,"hasTruncateMarker":true,"authors":[{"name":"Henry Ruiz","title":"Blog Author","url":"https://github.com/haruiz","imageURL":"https://github.com/haruiz.png","key":"haruiz"}],"frontMatter":{"title":"Python for Data Science - Getting started","slug":"python-for-data-science-part-getting-started","description":"Thinking about jumping into a data science role, but you don\'t know why you should learn how to program and which programming language to choose? In this post, I will show you how to use python and discuss why this programming language is considered one of the top used in data science.","authors":["haruiz"],"tags":["python","data-science"]},"nextItem":{"title":"Python environments with pyenv and poetry","permalink":"/blog/python-environments-with-pyenv-and-poetry"}},"content":"\x3c!--truncate--\x3e\\n\\nimport TermynalReact from \\"@site/src/components/Termynal\\";\\nimport ReactPlayer from \'react-player\'\\n\\n## Introduction\\n\\nProgramming is an essential skill for data scientists. If you are considering starting a data science career, the sooner you learn how to code, the better it will be. Most data sciences jobs rely on programming to automate cleaning and organizing data sets, design databases, fine-tune machine learning algorithms, etc. Therefore, having some experience in programming Languages such as Python, R, and SQL makes your life easier and will allow you to automate your analysis pipelines.\\n\\nIn this week\'s post, we will focus on Python. A general-purpose programming language that allows us to work with data and explore different algorithms and techniques that would be extremely useful to add to our analysis toolbox.\\n\\n### Why should I learn how to program?\\n\\n\\nTo help organizations make better decisions,  a data scientist is a technical expert who uses mathematical and statistical techniques to manipulate, analyze and extract patterns from raw/noisy data to produce information. Those tools include but are not limited to statistical inference, pattern recognition, machine learning, deep learning, etc. \\n\\nData Scientist\'s responsibilities involve:\\n\\n- Work closely with business stakeholders to understand their goals and determine how data can be used to achieve them.  \\n- Fetching information from various sources and analyzing it to get a clear understanding of how an organization performs\\n- Undertaking data collection, preprocessing, and analysis\\n- Building models to address business problems\\n-  Presenting information in a way that your audience can understand using different data visualization techniques\\n\\nAlthough programming is not required to be a data scientist, taking advantage of the power of computers, most of these tasks can be automated. So, programming skills provide data scientists with the superpowers to manipulate, process, and analyze big datasets, automate and develop computational algorithms to produce results (faster and more effectively), and create neat visualizations to present the data more intuitively.\\n\\n<iframe width=\\"100%\\" height=\\"400\\" src=\\"https://www.youtube.com/embed/dU1xS07N-FA\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n## Programming languages for data science\\n\\nThere are hundreds of programming languages out there, built for diverse purposes. Some are better suited for web or mobile development, others for data analysis, etc. Choosing the correct language to use will depend on your level of experience, role, and/or project goals. In the last few years, Python has been ranked as one of the top programming languages data scientists use to manipulate, process, and analyze big datasets.\\n\\nBut why is Python so popular? Well, I will list some reasons why data scientists love Python and what makes this language suitable for high productivity and performance in processing large amounts of data.\\n\\n### Why Python?\\n\\n- Python is **open source**, so is freely available to everyone.You can even use it to develop commercial applications.\\n- Python is **Multi-Platform**. It can be run on any platform, including Windows, Mac, Linux, and Raspberry Pi.\\n- Python is a **Multi-paradigm** language, which means it can be used for both object-oriented and functional programming. It comes from you writing code in a way that is easy to read and understand.\\n- Python is **Multi-purpose**, so you can use it to develop almost any kind of application. You can use it to develop web applications, game development, data analysis, machine learning, and much more.\\n- Python syntax is **easy to read** and **easy to write**. So the learning curve is low in comparison to other languages.\\n- Data Science **packages ecosystem**: Python also has [PyPI package index,a python package repository](https://pypi.org/), where you can find many useful packages (Tensorflow, pandas, NumPy, etc.), which facilitates and speeds up your project\'s development. In PyPI, you can also publish your packages and share them with the community. The ecosystem keeps growing fast, and big companies like Google, Facebook, and IBM contribute by adding new packages.Some of the most used libraries for data science and machine learning are:\\n\\n  - [Tensorflow](https://www.tensorflow.org/), a high-performance numerical programming library for deep learning.\\n  - [Pandas](https://pandas.pydata.org/), a Python library for data analysis and manipulation.\\n  - [NumPy](https://www.numpy.org/), a Python library for scientific computing ( that offers an extensive collection of advanced mathematical functions, including linear algebra, Fourier transforms, random number generation, etc.)\\n  - [Matplotlib](https://matplotlib.org/), a Python library for plotting graphs and charts.\\n  - [Scikit-learn](https://scikit-learn.org/stable/index.html), a Python library for machine learning.\\n  - [Seaborn](https://seaborn.pydata.org/), a Python library for statistical data visualization.\\n\\n- **High performance:** Although some people complain about performance in Python (see [Why Python is so slow and how to speed it up](https://towardsdatascience.com/why-is-python-so-slow-and-how-to-speed-it-up-485b5a84154e)), mainly caused by some features such as dynamic typing, it is also simple to extend developing modules in other compiled languages like C++ or C which could [speed up your code by 100x.](https://towardsdatascience.com/write-your-own-c-extension-to-speed-up-python-x100-626bb9d166e7)\\n  \\nThe following section will introduce you to the Python programming language, and we will start learning its syntax.\\n\\n## Hands-on Tutorial\\n\\n:::tip\\nTo set up our python environment, we will use `pyenv` and `poetry.` You can learn more about these tools in the previous post.\\n[Python environments with pyenv and poetry](/blog/python-environments-with-pyenv-and-poetry)\\n:::\\n\\nWe will start with a simple program that prints \\"Hello World\\" on the screen, and from there, we will begin navigating into the python syntax, learning some of its keywords and essential building blocks. Start creating a folder called \\"python_demo\\" and a file called \\"hello_world.py.\\" To do so, run the following commands in the terminal:\\n\\n<TermynalReact lines ={[\\n{ type: \'input\', value: \'cd workspace\' , comment: \\"moving into the workspace directory. It could be any folder in your machine where you want to have your python_demo folder\\"},\\n{ type: \'input\', value: \'mkdir python_demo\' , comment: \\"creating the python_demo folder inside the workspace folder\\" },\\n{ type: \'input\', value: \'cd python_demo\' , comment: \\"going into the python_demo folder\\" },\\n{ type: \'input\', value: \'touch hello_world.py\' , comment: \\"creating the hello_world.py file inside the python_demo folder, in windows use the command type\\" },\\n{ type: \'input\', value: \\"pyenv version\\", comment: \\"checking the python version being used by pyenv to create the Python environment\\"},\\n{ type: \\"output\\", value: \\"python 3.10.0\\"},\\n{ type: \\"input\\", value: \\"poetry init\\", comment: \\"initialize poetry project into the python_demo directory\\"},\\n{ type: \\"input\\", value: \\"poetry install\\", comment: \\"create python environment within the folder\\"}\\n]} />\\n\\nIf all the command runs successfully, you should see the following folder structure:\\n\\n    \u251c\u2500\u2500 python_demo\\n    \u2502\xa0\xa0 \u251c\u2500\u2500 hello_world.py\\n    \u2502\xa0\xa0 \u251c\u2500\u2500 poetry.lock\\n    \u2502\xa0\xa0 \u2514\u2500\u2500 pyproject.toml\\n\\nAnd the `pyproject.toml` file should look like this:\\n\\n    [tool.poetry]\\n    name = \\"python_demo\\"\\n    version = \\"0.1.0\\"\\n    description = \\"\\"\\n    authors = [\\"Henry Ruiz  <henryruiz22@gmail.com>\\"]\\n    \\n    [tool.poetry.dependencies]\\n    python = \\"^3.10\\"\\n    \\n    [tool.poetry.dev-dependencies]\\n    \\n    [build-system]\\n    requires = [\\"poetry-core>=1.0.0\\"]\\n    build-backend = \\"poetry.core.masonry.api\\"\\n\\nYou can see that the Python version was set to 3.10.0. that will depend on the version of Python you are using with pyenv.\\n\\n:::tip\\nTo check the python version run the command `pyenv version` in the terminal.\\n:::\\n\\nTo open our python_demo folder in pycharm check the animation below.\\n\\n<ReactPlayer playing controls url={require(\\"./open-folder-pycharm.mp4\\").default} />\\n\\nAt this point, you should know how to create and run python files. So, in the coming tutorials, we will be working on the hello_world.py file, exploring the python syntax, and learning cool things about Python and data science.\\n\\nThanks for reading!, and I hope this tutorial helped you to get started with Python."},{"id":"python-environments-with-pyenv-and-poetry","metadata":{"permalink":"/blog/python-environments-with-pyenv-and-poetry","source":"@site/blog/2022-08-07-Python-environments-with-pyenv-and-poetry/index.md","title":"Python environments with pyenv and poetry","description":"If you have been using Python for a while or just started, you may have already noticed that handling different python-installations and dependencies(packages) can be a nightmare! So, having tools that enable us to isolate and manage our project\'s dependencies is highly convenient. In this post, I will show you how to use pyenv and poetry to create your code environments.","date":"2022-08-07T00:00:00.000Z","formattedDate":"August 7, 2022","tags":[{"label":"python","permalink":"/blog/tags/python"},{"label":"data-science","permalink":"/blog/tags/data-science"}],"readingTime":17.67,"hasTruncateMarker":true,"authors":[{"name":"Henry Ruiz","title":"Blog Author","url":"https://github.com/haruiz","imageURL":"https://github.com/haruiz.png","key":"haruiz"}],"frontMatter":{"title":"Python environments with pyenv and poetry","slug":"python-environments-with-pyenv-and-poetry","hide_table_of_contents":false,"image":"https://haruiz.github.io/img/2022-08-07-Python-environments-with-pyenv-and-poetry-og_image.png","description":"If you have been using Python for a while or just started, you may have already noticed that handling different python-installations and dependencies(packages) can be a nightmare! So, having tools that enable us to isolate and manage our project\'s dependencies is highly convenient. In this post, I will show you how to use pyenv and poetry to create your code environments.","authors":["haruiz"],"tags":["python","data-science"]},"prevItem":{"title":"Python for Data Science - Getting started","permalink":"/blog/python-for-data-science-part-getting-started"}},"content":"\x3c!--truncate--\x3e\\n\\nimport TermynalReact from \\"@site/src/components/Termynal\\";\\n\\nimport TOCInline from \'@theme/TOCInline\';\\n\\nimport Image from \'@theme/IdealImage\';\\n\\nimport Tabs from \'@theme/Tabs\';\\n\\nimport TabItem from \'@theme/TabItem\';\\n\\n[//]: # ()\\n[//]: # (:::tip In this post you will learn)\\n\\n[//]: # ()\\n[//]: # (<TOCInline toc={toc} />)\\n\\n[//]: # ()\\n[//]: # (:::)\\n\\n\\n### Why Python?\\n\\nAccording to the [**2022 stack overflow developer survey**](https://survey.stackoverflow.co/2022/#technology-most-loved-dreaded-and-wanted), Python is one of the most widely used programming languages today. Of 71,467 responses, 68% of developers expressed that they love the language and are planning to continue working with Python, and approximately 12.000 of those who haven\'t got the chance to use it have expressed their interest in starting developing with it. Its popularity is mainly due to its simplicity in syntax, expressiveness, and versatility. We can use Python to create any kind of software, from web applications to scientific computing.\\n\\n\\nPython also has [**PyPI package index**](https://pypi.org/),a python package repository, where you can find many useful packages (Tensorflow, pandas, NumPy, etc.), which facilitates and speeds up your project\'s development. In PyPI, you can also publish your packages and share them with the community. The ecosystem keeps growing fast, and big companies like Google, Facebook, and IBM contribute by adding new packages. \\n\\n:::info\\nThe Python Package Index, abbreviated as PyPI (/\u02ccpa\u026api\u02c8a\u026a/) and also known as the Cheese Shop (a reference to the Monty Python\'s Flying Circus sketch \\"Cheese Shop\\"), is the official third-party software repository for Python. It is analogous to the CPAN repository for Perl and to the CRAN repository for R.<a href=\\"#wikipedia:1\\">[1]</a>\\n:::\\n### Python Dependency hell\\n\\n\\nWell, it sounds like Python is amazing! However, if you have been using Python for a while, you may have already noticed that handling different python-installations and dependencies(packages) can be a nightmare! An issue commonly known as dependency hell, which is a term associated with the frustration arising from problems managing our project\'s dependencies. \\n\\nDependency hell in Python often happens because pip does not have a dependency resolver and because all dependencies are shared across projects. So, other projects could be affected when a given dependency may need to be updated or uninstalled. \\n\\nOn top of it, since Python doesn\'t distinguish between different versions of the same library in the `/site-packages` directory, this leads to many conflicts when you have two projects requiring different versions of the same library or the global installation doesn\'t match.\\n\\nThus, having tools that enable us to isolate and manage our project\'s dependencies is highly convenient. In this post, I will show you how to use pyenv and poetry to create your code environments.\\n\\n<div style={{textAlign: \\"center\\"}}>\\n    <Image img={require(\\"./dependency-hell.png\\")} alt=\\"Dependency hell\\" />\\n</div>\\n\\n### Virtual environments to the rescue!\\n\\nA Python virtual environment is a separate folder where only your project\'s dependencies(packages) are located. Each virtual environment has its own Python binary (which matches the version of the binary that was used to create this environment) and its own independent set of installed Python packages in its site directories. That is a very convenient way to prevent `Dependency Hell.`\\n\\n:::tip\\nPython virtual environment allows multiple versions of Python to coexist in the same machine, so you can test your application using different Python versions. It also keeps your project\'s dependencies isolated, so they don\'t interfere with the dependencies of others projects.\\n:::\\n\\nThere are different tools out there that can be used to create Python virtual environments. In this post, I will show you how to use pyenv and poetry. However, you can also try other tools, such as [virtualenv](https://virtualenv.pypa.io/en/latest/) or anaconda, and based on your experience, you can choose that one you feel most comfortable with.\\nthe video below will provide you with more information about these kinds of tools.\\n\\n<center>\\n    <iframe width=\\"100%\\" height=\\"400\\" src=\\"https://www.youtube.com/embed/3J02sec99RM\\" f allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n</center>\\n\\n### Pyenv\\npyenv is a command line tool which allows you to install and run multiple versions of Python in the same machine. For those who come from a javascript background, pyenv is a very similar tool to nvm.\\n\\n**Setup & get started with pyenv**\\n\\nYou can follow the steps below for installing `pyenv` on macOS or check the [documentation](https://github.com/pyenv/pyenv) for alternative installation methods. \\n\\n<TermynalReact lines ={[\\n{ type: \'input\', value: \'curl https://pyenv.run | bash\', comment: \\"Install pyenv\\"},\\n{type: \'output\', value: \'Installing pyenv...\'},\\n{type: \'output\', value: \'Installation complete!\'}\\n]} />\\n\\n\\nAfter having installed pyenv, you can then install any python version running the command `pyenv install <version>`.\\n<TermynalReact lines ={[\\n{ type: \'input\', value: \'pyenv install 3.9.0\', comment: \\"Install python 3.9.0 in my machine\\"},\\n{type: \'output\', value: \'Downloading Python-3.9.0.tar.xz...\'},\\n{type: \'output\', value: \'-> https://www.python.org/ftp/python/3.7.6/Python-3.7.6.tar.xz\', delay: 1000},\\n{type: \'progress\'},\\n{type: \'output\', value: \'Installed Python-3.9.0 to /Users/haruiz/.pyenv/versions/3.9.0\'}\\n]} />\\n\\n:::tip\\nif you are not sure about which versions are available to be installed in your machine, you can run the command `pyenv install --list`.\\n:::\\n\\nYou can run the command `pyenv versions` to check which Python versions have been installed.\\n\\n<TermynalReact lines ={[\\n{ type: \'input\', value: \'pyenv versions\' , comment: \\"Check which versions of Python are installed\\"},\\n{type: \'output\', value: \'system\'},\\n{type: \'output\', value: \'* 3.10.0 (set by /Users/haruiz/.pyenv/version)\'},\\n{type: \'output\', value: \'3.9.0\'}\\n]} />\\n\\nTo set the default version of Python to be used, you can run the command `pyenv global <version>`. This version will be used when you run `python` or `python3` in your terminal.\\n\\n<TermynalReact lines ={[\\n{type: \'input\', value: \'pyenv global 3.10.0\', comment: \\"Set python 3.10.0 as the default version\\"},\\n{type: \'input\', value: \'python --version\', comment: \\"Check the version of python after setting it\\"},\\n{type: \'output\', value: \'Python 3.9.0\'},\\n]} />\\n\\nAlternatively to the `pyenv global` command, Sometimes you want to set a specific version of Python to be used within a specific folder. You can create a `.python-version` file in the folder and set the version you want to use,  or by running the command `pyenv local <version>`. pyenv will then use this version when you run `python` or `python3` in the folder.\\n\\n<TermynalReact lines ={[\\n{ type: \'input\', value: \'mkdir myproject\', comment: \\"Create a folder called myproject\\"},\\n{type: \'input\', value: \'cd myproject\', comment: \\"Change directory to myproject\\"},\\n{type: \'input\', value: \'pwd\',  comment: \\"Check the current directory after the cd command\\"},\\n{type: \'output\', value: \'/Users/haruiz/myproject\'},\\n{type: \'input\', value: \'pyenv local 3.9.0\', comment: \\"Set python 3.9.0 as the default version in myproject\\"},\\n{type: \'input\', value: \'python --version\', comment: \\"Check the version of python after setting it\\"},\\n{type: \'output\', value: \'Python 3.9.0\'},\\n]} />\\n\\nTo make sure what python version is being used by pyenv, you can run the command `pyenv version`.\\n\\n### Poetry\\n\\nPoetry is a tool that allows you to manage your project\'s dependencies and facilitates the process of packaging for distribution. It resolves your project dependencies and makes sure that there are no conflicts between them.\\n\\nPoetry integrates with the [PyPI](https://pypi.org/) package index to find and install your environment dependencies, and pyenv to set your project python runtime.\\n\\nTo install poetry we follow the steps below:\\n\\n<TermynalReact lines ={[\\n{ type: \'input\', value: \'curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python\', comment: \\"Install poetry\\"},\\n{type: \'progress\'},\\n{type: \'output\', value: \'Installation complete!\'},\\n{type: \\"input\\", value: `export PATH=\\"\\\\$HOME/.poetry/bin:\\\\$PATH\\"`, comment: \\"Add poetry to the PATH\\"},\\n{type: \'input\', value: \'poetry --version\', comment: \\"Check the version of poetry after installing it\\"},\\n{type: \'output\', value: \'Poetry version 1.1.13\'},\\n{type: \'input\', value: \'poetry help completions\', comment: \\"Check the completions of poetry\\"},\\n{type: \'output\', value: \'poetry completions bash\'},\\n{type: \'input\', value: \'poetry config virtualenvs.in-project true\', comment: \\"Configure poetry to create virtual environments inside the project\'s root directory\\"}\\n]} />\\n\\nIf you were able to run the previous commands, we can then move forward with the rest of the tutorial.\\n\\nTo ask poetry to create a new project, we use the command `poetry new <project name>`. \\nThis will create a new folder with the name `<project name>` and a `pyproject.toml` folder inside it.\\n\\n<TermynalReact lines ={[\\n    { type: \'input\', value: \'poetry new myproject\', comment: \\"Create a new project called myproject\\"},\\n    {type: \'output\', value: \'Created package myproject in myproject\'}\\n]} />\\n\\nIf you already have a project, and you want to use poetry to manage the dependencies, you can use the command `poetry init`. So, poetry will add the `pyproject.toml` file to your project.\\n\\n<TermynalReact lines ={[\\n    { type: \'input\', value: \'cd myproject\', comment: \\"Change directory to myproject\\"},\\n    { type: \'input\', value: \'poetry init\', comment: \\"Initialize poetry in myproject\\"},\\n]} />\\n\\n\\nThe main file of your poetry project is the `pyproject.toml` file. This file defines your project\'s dependencies(python packages) and holds the required metadata for packaging. Poetry updates this file every time a new python package is installed. By sharing this file with others, they can recreate your project environment and run your application. To do so, they will need to have poetry installed and run the command `poetry install` within the same folder where the `pyproject.toml` file is located.\\n\\nNow we can start adding dependencies to our project. To do so, we use the command `poetry add <package name>`.\\n\\n<TermynalReact lines ={[\\n    { type: \'input\', value: \'poetry add numpy pandas\', comment: \\"Add numpy and pandas to the project, this command replaces the pip install command\\"},\\n    {type: \'output\', value: \'Installed requests\'}\\n]} />\\n\\nNow our `pyproject.toml` file looks like:\\n\\n    [tool.poetry]\\n    name = \\"myproject\\"\\n    version = \\"0.1.0\\"\\n    description = \\"\\"\\n    authors = [\\"Henry Ruiz  <henry.ruiz.tamu@gmail.com>\\"]\\n    \\n    [tool.poetry.dependencies]\\n    python = \\"^3.10\\"\\n    numpy = \\"^1.23.1\\"\\n    pandas = \\"^1.4.3\\"\\n    \\n    [tool.poetry.dev-dependencies]\\n    pytest = \\"^5.2\\"\\n    \\n    [build-system]\\n    requires = [\\"poetry-core>=1.0.0\\"]\\n    build-backend = \\"poetry.core.masonry.api\\"\\n\\nLest review that file sections:\\n\\n- **\\\\[tool.poetry\\\\]:** This section contains informational metadata about our package, such as the package name, description, author details, etc. Most of the config values here are optional unless you\'re planning on publishing this project as an official PyPi package. \\n- **\\\\[tool.poetry.dependencies\\\\]:** This section defines the dependencies of your project. Here is where you define the python packages that your project requires to run. We can update this file manually if it is needed.\\n- **\\\\[tool.poetry.dev-dependencies\\\\]:** This section defines the dev dependencies of your project. These dependencies are not required for your project to run, but they are useful for development.\\n- **\\\\[build-system\\\\]:** This is rarely a section you\'ll need to touch unless you upgrade your version of Poetry.\\n\\nTo see in a nicer format the dependencies of your project, you can use the command `poetry show --tree`. This command draws a graph of all of our dependencies as well as the dependencies of our dependencies.\\n\\n<TermynalReact lines ={[\\n    { type: \'input\', value: \'poetry show --tree\', comment: \\"Show the dependencies of our project\\"}]} />\\n\\nIf we are not sure at some point that we have the latest version of a dependency, we can tell poetry to check on our package repository if there is a new version by using \u201c\u2014 latest\u201d option\\n\\n<TermynalReact lines ={[\\n    { type: \'input\', value: \'poetry show --latest\', comment: \\"Show the latest version of our dependencies\\"}]} />\\n\\nIf we list our folder content, we will see that not only the `pyproject.toml` file is created, but also some other folders and files. So, let\'s take a look at the contents of the `myproject` folder.\\n\\n    \u251c\u2500\u2500 .venv\\n    \u2502\xa0\xa0 \u251c\u2500\u2500 .gitignore\\n    \u2502\xa0\xa0 \u251c\u2500\u2500 bin\\n    \u2502\xa0\xa0 \u251c\u2500\u2500 lib\\n    \u2502\xa0\xa0 \u2514\u2500\u2500 pyvenv.cfg\\n    \u251c\u2500\u2500 README.rst\\n    \u251c\u2500\u2500 myproject\\n    \u2502\xa0\xa0 \u2514\u2500\u2500 __init__.py\\n    \u251c\u2500\u2500 poetry.lock\\n    \u251c\u2500\u2500 pyproject.toml\\n    \u2514\u2500\u2500 tests\\n        \u251c\u2500\u2500 __init__.py\\n        \u2514\u2500\u2500 test_myproject.py\\n    \\n    5 directories, 11 files\\n\\n- **\\\\`.venv\\\\`**: This folder is created by poetry when it creates a virtual environment.It isolates the project from the system environment and provides a clean environment for your project. It contains the Python interpreter and your projects dependencies. \\n- **poetry.lock**: When Poetry finished installing the dependencies, it writes all of the packages and the exact versions of them to the poetry.lock file, locking the project to those specific versions. \\n\\n:::note\\n Notice that this folder structure is created only if the `poetry new myproject` was executed. When poetry is initialized within a folder that already exists ( using the `poetry init` command), only the `pryproject.toml` and the .env folder are created.\\n:::\\n\\n:::tip\\nYou should commit the poetry.lock file to your project repo so that all people working on the project are locked to the same versions of dependencies. For more info, check this link : [Poetry basic usage](https://python-poetry.org/docs/basic-usage/)\\n:::\\n\\nBuilding our project and publishing it is just running the ```poetry build``` and ```poetry publish``` commands, so it is pretty intuitive. The publish command will submit our application to pip, so other developers can easily install it.\\n\\n### Hands-on tutorial \\n\\n**Creating a python package using poetry**\\n\\nIn this section, you will learn how to create a simple python package named `style_image` with poetry. This simple python package takes two images, the style image, and the content image, and performs style transfer. \\"Style transfer is an optimization technique used to take two images\u2014a content image and a style reference image (such as an artwork by a famous painter)\u2014and blend them together, so the output image looks like the content image, but \u201cpainted\u201d in the style of the style reference image.\\"<a href=\\"#tensorflow-docs:1\\">[2]</a>\\n\\nFor our `style_image` package we will use the `magenta/arbitrary-image-stylization-v1-256` model available in TensorflowHub under-the-hood.\\n\\nSo, let\'s do it!!\\n\\nWe will start by creating a new project called `style_image` using the command `poetry new style_image`.\\n\\n<TermynalReact lines ={[\\n    { type: \'input\', value: \'pyenv version\', comment: \\"Check the version of python that is being used by pyenv, it would be the python version that will be used by poetry\\"},\\n    { type: \'input\', value: \'poetry new style_image\', comment: \\"Create a new project called style_image\\"},\\n]} />\\n\\n**Installing package dependencies**\\n\\nNext we are going to install the dependencies of our project, so we run the commands:\\n\\n<TermynalReact lines ={[\\n    { type: \'input\', value: \'cd style_image\', comment: \\"Move into the style_image folder where the `pyproject.toml` file is located\\"},\\n    { type: \'input\', value: \'poetry add tensorflow-hub tensorflow numpy pillow validators \\"typer[all]\\"\', comment: \\"Add the dependencies to the project\\", lineDelay: 10.0},\\n    {type: \\"output\\", value: \\"Updating dependencies\\"}, \\n    {type: \\"output\\", value: \\"Resolving dependencies...\\"}, \\n    {type: \\"progress\\", progressPercent: 50},\\n    { type: \'output\', value: `Solver Problem : \\\\n \\nThe current project\\\\\'s Python requirement (>=3.10,<4.0) \\nis not compatible with \\nsome of the required packages Python requirement..... \\\\n\\nFor tensorflow, a possible solution would be to set the \'python\' property to \\">=3.10,<3.11\\"\\n                    `, color: \\"red\\"},\\n]} />\\n\\nWe will see that there is an error trying to install tensorflow:\\n\\n    Creating virtualenv style-image in /Users/haruiz/temp/style_image/.venv\\n    Using version ^0.12.0 for tensorflow-hub\\n    Using version ^2.9.1 for tensorflow\\n    Using version ^1.23.1 for numpy\\n    Using version ^9.2.0 for Pillow\\n    Using version ^0.20.0 for validators\\n    Using version ^0.6.1 for typer\\n    \\n    Updating dependencies\\n    Resolving dependencies... (4.2s)\\n    \\n      SolverProblemError\\n    \\n      The current project\'s Python requirement (>=3.10,<4.0) is not compatible with some of the required packages Python requirement:\\n        - tensorflow-io-gcs-filesystem requires Python >=3.7, <3.11, so it will not be satisfied for Python >=3.11,<4.0\\n\\nThe great thing is that poetry generally provides information on how to fix them. For the error above, poetry suggests restricting the python property to \\">=3.10,<3.11\\" in the pyproject.toml file. \\n\\n        For tensorflow-io-gcs-filesystem, a possible solution would be to set the `python` property to \\">=3.10,<3.11\\"\\n\\n:::tip\\nMake sure you always check the output in the terminal.\\n:::\\n\\nSo the `pyproject.toml` file is now:\\n\\n```toml showLineNumbers {9}\\n[tool.poetry]\\nname = \\"style_image\\"\\nversion = \\"0.1.0\\"\\ndescription = \\"\\"\\nauthors = [\\"Henry Ruiz  <henryruiz22@gmail.com>\\"]\\nreadme = \\"README.md\\"\\n\\n[tool.poetry.dependencies]\\npython = \\">=3.10,<3.11\\"\\n\\n[tool.poetry.dev-dependencies]\\npytest = \\"^5.2\\"\\nblack = \\"^22.6.0\\"\\n\\n[tool.poetry.scripts]\\nstyle_image = \\"style_image.main:app\\"\\n\\n[build-system]\\nrequires = [\\"poetry-core>=1.0.0\\"]\\nbuild-backend = \\"poetry.core.masonry.api\\"\\n```\\n\\nWe can then try to install the dependencies again:\\n\\n```bash\\npoetry add tensorflow-hub tensorflow numpy pillow validators \\"typer[all]\\"\\n```\\n\\nAfter installing the dependencies, our `pyproject.toml` file is now:\\n\\n```toml showLineNumbers {9-15}\\n[tool.poetry]\\nname = \\"style_image\\"\\nversion = \\"0.1.0\\"\\ndescription = \\"\\"\\nauthors = [\\"Henry Ruiz  <henryruiz22@gmail.com>\\"]\\nreadme = \\"README.md\\"\\n\\n[tool.poetry.dependencies]\\npython = \\">=3.10,<3.11\\"\\ntensorflow-hub = \\"^0.12.0\\"\\nnumpy = \\"^1.23.1\\"\\nPillow = \\"^9.2.0\\"\\ntensorflow = \\"^2.9.1\\"\\nvalidators = \\"^0.20.0\\"\\ntyper = {extras = [\\"all\\"], version = \\"^0.6.1\\"}\\n\\n[tool.poetry.dev-dependencies]\\npytest = \\"^5.2\\"\\nblack = \\"^22.6.0\\"\\n\\n[tool.poetry.scripts]\\nstyle_image = \\"style_image.main:app\\"\\n\\n[build-system]\\nrequires = [\\"poetry-core>=1.0.0\\"]\\nbuild-backend = \\"poetry.core.masonry.api\\"\\n```\\n\\n**Coding our `style_image` package**\\n\\nAt this point, we are ready to start coding, let\'s create the folder structure below and replace the code in each .py file with the code on this repository [https://github.com/haruiz/style_image](https://github.com/haruiz/style_image):\\n\\n    \u251c\u2500\u2500 README.md\\n    \u251c\u2500\u2500 README.rst\\n    \u251c\u2500\u2500 data\\n    \u2502\xa0\xa0 \u2514\u2500\u2500 content_image.jpg\\n    \u251c\u2500\u2500 main.py\\n    \u251c\u2500\u2500 poetry.lock\\n    \u251c\u2500\u2500 pyproject.toml\\n    \u251c\u2500\u2500 style_image\\n    \u2502\xa0\xa0 \u251c\u2500\u2500 __init__.py\\n    \u2502\xa0\xa0 \u251c\u2500\u2500 core\\n    \u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 __init__.py\\n    \u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 style_image.py\\n    \u2502\xa0\xa0 \u251c\u2500\u2500 main.py\\n    \u2502\xa0\xa0 \u2514\u2500\u2500 util\\n    \u2502\xa0\xa0     \u251c\u2500\u2500 __init__.py\\n    \u2502\xa0\xa0     \u251c\u2500\u2500 __pycache__\\n    \u2502\xa0\xa0     \u2514\u2500\u2500 image_utils.py\\n    \u251c\u2500\u2500 stylized_image.png\\n    \u2514\u2500\u2500 tests\\n        \u251c\u2500\u2500 __init__.py\\n        \u2514\u2500\u2500 test_style_image.py\\n\\nCode :\\n\\n\\n\\n<Tabs>\\n  <TabItem value=\\"main.py\\" label=\\"main.py\\" default>\\n\\n```python showLineNumbers \\nfrom style_image import StyleImage\\n\\nif __name__ == \\"__main__\\":\\n\\n    content_image_path = \\"data/content_image.jpg\\"\\n    style_image_path = \\"data/style_image.jpg\\"\\n\\n    stylized_image = (\\n        StyleImage(style_image_path)\\n        .transfer(content_image_path, output_image_size=800)\\n        .save(\\"stylized_image.jpg\\")\\n    )\\n```\\n\\n</TabItem>\\n  <TabItem value=\\"core/style_image.py\\" label=\\"core/style_image.py\\">\\n\\n```python showLineNumbers \\nimport tensorflow as tf\\nimport tensorflow_hub as hub\\n\\nfrom style_image.util import ImageUtils\\nfrom PIL import Image as PILImage\\n\\n\\nclass StyleImage:\\n    def __init__(self, style_image_path):\\n        self._style_image_path = style_image_path\\n        hub_handle = (\\n            \\"https://tfhub.dev/google/magenta/arbitrary-image-stylization-v1-256/2\\"\\n        )\\n        self._hub_module = hub.load(hub_handle)\\n\\n    def transfer(\\n        self, content_image_path, output_image_size=384, style_img_size=(256, 256)\\n    ):\\n        \\"\\"\\"\\n        transfer the style of the style image to the content image\\n        :param content_image_path: image path of the content image :\\n        :param output_image_size: The content image size can be arbitrary.\\n        :param style_img_size: The style prediction model was trained with image size 256 and it\'s the\\n        recommended image size for the style image (though, other sizes work as\\n        well but will lead to different results).\\n        Recommended to keep it at 256.\\n        :return:\\n        \\"\\"\\"\\n        content_img_size = (output_image_size, output_image_size)\\n        # Load the content and style images.\\n        content_image = ImageUtils.load_image(content_image_path, content_img_size)\\n        style_image = ImageUtils.load_image(self._style_image_path, style_img_size)\\n        # Stylize image.\\n        stylized_image_tensor = self._hub_module(\\n            tf.constant(content_image), tf.constant(style_image)\\n        )[0]\\n        stylized_image_arr = tf.image.convert_image_dtype(\\n            stylized_image_tensor, tf.uint8\\n        ).numpy()\\n        stylized_image_arr = stylized_image_arr[0]  # Remove batch dimension.\\n        stylized_image = PILImage.fromarray(stylized_image_arr)\\n        return stylized_image\\n```\\n\\n  </TabItem>\\n  <TabItem value=\\"util/image_utils.py\\" label=\\"util/image_utils.py\\">\\n\\n```python showLineNumbers \\nimport functools\\nimport tensorflow as tf\\nimport os\\nimport validators\\n\\n\\nclass ImageUtils:\\n    @staticmethod\\n    def crop_center(image):\\n        \\"\\"\\"Returns a cropped square image.\\"\\"\\"\\n        shape = image.shape\\n        new_shape = min(shape[1], shape[2])\\n        offset_y = max(shape[1] - shape[2], 0) // 2\\n        offset_x = max(shape[2] - shape[1], 0) // 2\\n        image = tf.image.crop_to_bounding_box(\\n            image, offset_y, offset_x, new_shape, new_shape\\n        )\\n        return image\\n\\n    @classmethod\\n    @functools.lru_cache(maxsize=None)\\n    def load_image(cls, image_path, image_size=(256, 256), \\n                   preserve_aspect_ratio=True):\\n        \\"\\"\\"Loads and preprocesses images.\\"\\"\\"\\n        # Cache image file locally.\\n        if validators.url(image_path):\\n            image_path = tf.keras.utils.get_file(\\n                os.path.basename(image_path)[-128:], image_path\\n            )\\n        # Load and convert to float32 numpy array, add batch dimension, and normalize to range [0, 1].\\n        img = tf.io.decode_image(\\n            tf.io.read_file(image_path), channels=3, dtype=tf.float32\\n        )[tf.newaxis, ...]\\n        img = cls.crop_center(img)\\n        img = tf.image.resize(\\n            img, image_size, preserve_aspect_ratio=preserve_aspect_ratio\\n        )\\n        return img\\n\\n``` \\n\\n  </TabItem>\\n<TabItem value=\\"style_image/main.py\\" label=\\"style_image/main.py\\">\\n\\n```python showLineNumbers \\nfrom style_image import StyleImage\\nimport typer\\n\\napp = typer.Typer()\\n\\n\\ndef style_image_callback(value: str):\\n    style_urls = dict(\\n        kanagawa_great_wave=\\"https://upload.wikimedia.org/wikipedia/commons/0/0a/The_Great_Wave_off_Kanagawa.jpg\\",\\n        kandinsky_composition_7=\\"https://upload.wikimedia.org/wikipedia/commons/b/b4/Vassily_Kandinsky%2C_1913_-_Composition_7.jpg\\",\\n        hubble_pillars_of_creation=\\"https://upload.wikimedia.org/wikipedia/commons/6/68/Pillars_of_creation_2014_HST_WFC3-UVIS_full-res_denoised.jpg\\",\\n        van_gogh_starry_night=\\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ea/Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg/1024px-Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg\\",\\n        turner_nantes=\\"https://upload.wikimedia.org/wikipedia/commons/b/b7/JMW_Turner_-_Nantes_from_the_Ile_Feydeau.jpg\\",\\n        munch_scream=\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Edvard_Munch%2C_1893%2C_The_Scream%2C_oil%2C_tempera_and_pastel_on_cardboard%2C_91_x_73_cm%2C_National_Gallery_of_Norway.jpg\\",\\n        picasso_demoiselles_avignon=\\"https://upload.wikimedia.org/wikipedia/en/4/4c/Les_Demoiselles_d%27Avignon.jpg\\",\\n        picasso_violin=\\"https://upload.wikimedia.org/wikipedia/en/3/3c/Pablo_Picasso%2C_1911-12%2C_Violon_%28Violin%29%2C_oil_on_canvas%2C_Kr%C3%B6ller-M%C3%BCller_Museum%2C_Otterlo%2C_Netherlands.jpg\\",\\n        picasso_bottle_of_rum=\\"https://upload.wikimedia.org/wikipedia/en/7/7f/Pablo_Picasso%2C_1911%2C_Still_Life_with_a_Bottle_of_Rum%2C_oil_on_canvas%2C_61.3_x_50.5_cm%2C_Metropolitan_Museum_of_Art%2C_New_York.jpg\\",\\n        fire=\\"https://upload.wikimedia.org/wikipedia/commons/3/36/Large_bonfire.jpg\\",\\n        derkovits_woman_head=\\"https://upload.wikimedia.org/wikipedia/commons/0/0d/Derkovits_Gyula_Woman_head_1922.jpg\\",\\n        amadeo_style_life=\\"https://upload.wikimedia.org/wikipedia/commons/8/8e/Untitled_%28Still_life%29_%281913%29_-_Amadeo_Souza-Cardoso_%281887-1918%29_%2817385824283%29.jpg\\",\\n        derkovtis_talig=\\"https://upload.wikimedia.org/wikipedia/commons/3/37/Derkovits_Gyula_Talig%C3%A1s_1920.jpg\\",\\n        amadeo_cardoso=\\"https://upload.wikimedia.org/wikipedia/commons/7/7d/Amadeo_de_Souza-Cardoso%2C_1915_-_Landscape_with_black_figure.jpg\\",\\n    )\\n    if value in style_urls:\\n        return style_urls[value]\\n    return value\\n\\n\\n@app.command()\\ndef main(\\n    style_image: str = typer.Option(\\n        ..., \\"--style_image\\", \\"-s\\", callback=style_image_callback\\n    ),\\n    content_image: str = typer.Option(..., \\"--content_image\\", \\"-c\\"),\\n    output_image_size: int = typer.Option(384, \\"--output_image_size\\", \\"-sz\\"),\\n    output_image_path: str = typer.Option(\\"stylized_image.png\\", \\"--output_image_path\\", \\"-o\\"),\\n):\\n    style_image = StyleImage(style_image)\\n    stylized_image = style_image.transfer(content_image, output_image_size=output_image_size)\\n    stylized_image.save(output_image_path)\\n\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n\\n:::note running your scripts using the virtual environment\\nNotice that if you want to execute the `main.py` file or any other file/script using the python environment you just created, you need to run the command `poetry run python main.py.` So, poetry knows that you are running the `main.py` file with the python environment created for the `style_image` package.\\nIf you feel more comfortable running `python main.py,` instead of running `poetry run ...` you can permanently activate the environment running the command `poetry shell.`. So it will be activated for all the commands you run.\\n:::\\n\\nPoetry and pyenv are integrated with `visual studio` code and `Pycharm`. In fact, they will automatically recognize the python environment created by poetry.\\n\\n**Publishing our package to PyPi**\\n\\nPublishing our package in Pypi should be straightforward. We just run the `poetry publish` command. Since this is just a demo, we are going to publish our package to the pypi test repository `https://test.pypi.org/.` However, the steps should be the same in production `https://pypi.org/.`\\n\\n<TermynalReact lines ={[\\n    { type: \'input\', value: \'poetry build\', comment: \\"build package\\" },\\n    { type: \'input\', value: \'poetry config repositories.testpypi https://test.pypi.org/legacy/\', comment: \\"add repository\\" },\\n    { type: \'input\', value: \'poetry config repositories\', comment: \\"list repositories\\" },\\n    { type: \'output\', value: `{\'testpypi\': {\'url\': \'https://test.pypi.org/\'}}`, color: \\"gray\\" },\\n    { type: \'input\', value: \'poetry publish -r testpypi\', comment: \\"publish package to testpypi repository\\" },\\n    { type: \'prompt\', value: \'username : haruiz\'},\\n    { type: \'prompt\', value: \'password\'},\\n    { type: \\"output\\", value: \\"Publishing style_image (0.1.0) to testpypi..\\", color:\\"green\\"}\\n  ]} />\\n\\nIf the `publish` command is successful, you will be able to find the package in the testpypi repository.\\n\\n<div style={{textAlign: \\"center\\"}}>\\n    <Image img={require(\\"./pypi-test.png\\")} alt=\\"Dependency hell\\" />\\n</div>\\n\\nThat is all!! We are done!!. You can check the links below for more information about poetry. \\n\\nThanks for your support and don\'t forget to share,\\n\\n\\n**Some useful resources**\\n- [Poetry Documentation](https://python-poetry.org/)\\n- [Pyenv Documentation](https://github.com/pyenv/pyenv)\\n- [Great talk about poetry](https://www.youtube.com/watch?v=QX_Nhu1zhlg&ab_channel=PyGotham2019)\\n- [Package Python Projects the Proper Way with Poetry](https://hackersandslackers.com/python-poetry-package-manager/)\\n- [Poetry: Finally an all-in-one tool to manage Python packages](https://medium.com/analytics-vidhya/poetry-finally-an-all-in-one-tool-to-manage-python-packages-3c4d2538e828)\\n- [Making Python Packages Part 2: How to Publish & Test Your Package on PyPI with Poetry](https://towardsdatascience.com/packages-part-2-how-to-publish-test-your-package-on-pypi-with-poetry-9fc7295df1a5)\\n- [Publishing to a private Python repository with Poetry](https://medium.com/packagr/publishing-to-a-private-python-repository-with-poetry-23b660484471)\\n- [Python Virtual Environments tutorial using Virtualenv and Poetry](https://serpapi.com/blog/python-virtual-environments-using-virtualenv-and-poetry/)\\n- [The Nine Circles of Python Dependency Hell](https://medium.com/knerd/the-nine-circles-of-python-dependency-hell-481d53e3e025)\\n- [Get started with pyenv & poetry. Saviours in the python chaos!](https://blog.jayway.com/2019/12/28/pyenv-poetry-saviours-in-the-python-chaos/)\\n\\n**References**\\n<ul>\\n <li><a id=\\"wikipedia:1\\" href=\\"https://en.wikipedia.org/wiki/Python_Package_Index\\" target=\\"_blank\\">[1] Python Package Index</a></li>\\n <li><a id=\\"tensorflow-docs:1\\" href=\\"https://www.tensorflow.org/tutorials/generative/style_transfer\\" target=\\"_blank\\">[2] Neural style transfer</a></li>\\n</ul>"}]}')}}]);