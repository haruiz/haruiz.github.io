"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[866],{4612:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"python-for-data-science-exploring-the-syntax","metadata":{"permalink":"/blog/python-for-data-science-exploring-the-syntax","source":"@site/blog/2022-10-26-pythoon-for-data-science-exploring-the-syntax/index.md","title":"Python for Data Science - Exploring the syntax","description":"In the last post, we discussed the importance of programming in the data science context and why Python is considered one of the top languages used by data scientists. In this week\'s post, we will explore the syntax of Python and create a simple program that uses Google Search API to find an image.","date":"2022-10-26T00:00:00.000Z","formattedDate":"October 26, 2022","tags":[{"label":"python","permalink":"/blog/tags/python"},{"label":"data-science","permalink":"/blog/tags/data-science"}],"readingTime":18.25,"hasTruncateMarker":true,"authors":[{"name":"Henry Ruiz","title":"Blog Author","url":"https://github.com/haruiz","imageURL":"https://github.com/haruiz.png","key":"haruiz"}],"frontMatter":{"title":"Python for Data Science - Exploring the syntax","slug":"python-for-data-science-exploring-the-syntax","description":"In the last post, we discussed the importance of programming in the data science context and why Python is considered one of the top languages used by data scientists. In this week\'s post, we will explore the syntax of Python and create a simple program that uses Google Search API to find an image.","authors":["haruiz"],"tags":["python","data-science"]},"nextItem":{"title":"Introduction to Reinforcement Learning","permalink":"/blog/introduction-to-reinforcement-learning"}},"content":"\x3c!--truncate--\x3e\\nIn the last post, we discussed the importance of programming in the data science context and why Python is considered one of the top languages used by data scientists. In this week\'s post, we will explore the syntax of Python and create a simple program that uses Google Cloud Vision API to detect faces in an image.\\n\\nYou will learn today:\\n- What is a computer program?\\n- How to write a program in Python?\\n  - Python syntax\\n  - How to organize your code in python using functions\\n- What is an API(Application Programming Interface)?\\n- How to use the Google Cloud Vision API?\\n\\nSo lets started!!!\\n\\n# What is a computer program?\\n\\nA computer program is a sequence of instructions we write using a programming language to tell the computer what to do for us. This sequence of instructions contains but is not limited to:\\nShow information to the user, ask the user for input, save and recover data in memory/disk and perform calculations. So, programming languages provide a set of built-in functions and instructions that can be used to accomplish these tasks.\\n\\n:::tip\\nIf we think about programming languages, we can think about how we communicate with others in different languages. Accordingly, depending on the kind of application or where our program will be running, we select the appropriate language.\\n:::\\n\\n# How to write a program in Python?\\n\\nWhen we write a programs in any language, it is always helpful to write down our algorithm in simple words. In a way, we can have a mental model of what our program will be doing and how it will be executed. To do so, we can use Pseudocode, a simplified version of computer programs written in natural or human-readable language that can be easily interpreted. You can check this [**cheat sheet**](https://cheatography.com/lcheong/cheat-sheets/pseudocode/) that will help you to write your program in Pseudocode.\\n\\n:::info Algorithm\\nFinite set of rules to be followed in calculations or other problem-solving operations, especially by a computer.\\n:::\\n\\nSo, let\'s define our pseudocode for our image finder program.\\n\\n```pseudocode showLineNumbers\\nVAR image_path as STRING = INPUT(\\"Please provide the path of the image: \\")\\nIF image_path is empty or image_path dont exist THEN\\n    PRINT(\\"image path could not be empty or the image does not exist\\")\\n    EXIT\\nENDIF\\n\\nFUNCTION read_image(image_path) as STRING\\n    VAR image_bytes as BYTES = read(image_path)\\n    RETURN image_bytes\\nENDFUNCTION\\n\\nFUNCTION detect_faces_on_image(image_bytes as BYTES) as LIST:\\n    api_response as LIST = call_face_detection_gcp_api(image_bytes)\\n    IF api_response is empty THEN\\n        PRINT(\\"No faces found\\")\\n        RETURN\\n    faces as LIST = []\\n    FOR json_entity in api_response THEN\\n        face as DICT = {\\n            \\"confidence\\": json_entity.confidence,\\n            \\"bounding_box\\": json_entity.bounding_box,\\n            \\"is_happy\\" : json_entity.joy_likelihood == \\"VERY_LIKELY\\"\\n        }\\n        faces.append(face)\\n    ENDFOR\\n    RETURN faces\\nENDFUNCTION\\n\\nimage_bytes = read_image(image_path)\\nfaces_list = detect_faces(image_bytes)\\ndisplay_detect_faces(faces_list)\\n```\\n\\nAs you can see in Pseudocode, we don\'t need to think about the implementation details of our program. We just write down our algorithm using a high-level language, so in this way we have a big picture of the tasks we need to perform that we can use later to translate our algorithm to a programming language. In line 11, for instance,  we call the Google Cloud Vision API to detect the faces in the image, but we don\'t know yet how it will happen.  \\n\\n## Python syntax\\n\\nTo learn about python syntax, we will navigate through the Pseudocode and convert it into a python script.\\n\\n### Variables\\n\\nProgramming is all about data and how we can use it to solve problems. So, we need to have a way to store data on our computer that we can access later during execution. To do so, we use variables. Variables are a way to store data in memory where we can almost save any data. In Python, it is straightforward to define a variable, we need to use the assignment operator `=` followed by the value we want to store, the Python interpreter will take care of the rest. It will under the hood allocate memory for the variable and store the value in it. \\n\\n```python\\n# String\\nmy_string = \\"Hello World\\"\\n# Integer\\nmy_integer = 1\\n# Float\\nmy_float = 1.0\\n# Boolean\\nmy_boolean = True\\n# List\\nmy_list = [1, 2, 3]\\n# Dictionary\\nmy_dict = {\\"key\\": \\"value\\"}\\n```\\n\\nWe can obtain the memory address and type of a variable using the `id()` and `type()` functions respectively.\\n\\n```python \\n\\n```python\\nmy_string = \\"Hello World\\"\\nmy_string_2 = \\"Hello World\\"\\nprint(id(my_string))\\nprint(id(my_string_2))\\nprint(type(my_string))\\nprint(type(my_string_2))\\n```\\n\\nIn our program, in line 1, we define a variable `image_path` and assign it the value of the user input. In Python, the `input()` function allows us to grab information from the user so we can save the value into a variable. Let\'s see how we can translate this Pseudocode line into Python:\\n\\n```python\\nimage_path = input(\\"Please provide the path of the image:\\")\\n```\\n\\nThe syntax is very similar to the Pseudocode. However, you can notice that in Python, we don\'t specify the variable type. That is because Python is a dynamically typed language, meaning that the variable type is inferred during the execution. In terms of productivity, this is very convenient because we don\'t need to worry about specifying the type when we define it. However, it can sometimes be a source of errors if we are not carefully doing operations. \\n\\nPython will raise an error if we try to perform an operation that is not supported by the type of the variable. Let\'s see an example:\\n\\n```python\\na = 2   \\nb = \\"2\\"\\n# error-line-next\\nprint(a + b)\\n# TypeError: unsupported operand type(s) for +: \'int\' and \'str\'\\n```\\n\\n\\n:::warning Rules for creating variables across languages\\n- A variable name must start with a letter or an underscore character.\\n- A variable name cannot start with a number.\\n- A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ ).\\n- Variable names are case-sensitive (name, Name and NAME are three different variables).\\n- The reserved words(keywords) cannot be used naming the variable.\\n:::\\n\\n### Conditional blocks\\n\\nA common task in programming is to execute a block of code only if a condition is met. In Python, we can use the `if` statement to do so. Let\'s see an example:\\n\\n```python\\na = 2\\nif a == 2:\\n    print(\\"a is equal to 2\\")\\n```\\n\\nIn the example above, we check if the variable `a` is equal to 2. If that is the case, we print the message \\"a is equal to 2\\". We can also use the `else` statement to execute a block of code if the condition is not met. Let\'s see an example:\\n\\n```python\\na = 2\\nif a == 2:\\n    print(\\"a is equal to 2\\")\\nelse:\\n    print(\\"a is not equal to 2\\")\\n```\\n\\nIn our program, we need to check if the user input is empty or if the image path does not exist. We can use the `if` statement to do so. Let\'s see how we can translate this Pseudocode line into Python:\\n\\n```python\\nimport os\\n\\nimage_path = input(\\"Please provide the path of the image:\\")\\nif image_path == \\"\\" or not os.path.exists(image_path):\\n    print(\\"image path could not be empty or the image does not exist\\")\\n    exit()\\n```\\n\\nAgain, we can observe that the syntax is very similar to the Pseudocode, just with the addition of the `os.path.exists()` function in the condition to check whether a image exists or not. The os module it is included in the Python standard library, and it provides a way to interact with the operating system. We also use the `exit()` function to exit the program in case the condition is met. We are going to discuss about modules later in this article.\\n\\n:::info Python Standard Library\\nThe Python Standard Library is a set of modules that comes with the Python installation. It provides a wide range of built-in functions and classes that we can use in our programs for different purposes. You can find more information about the Python Standard Library [here](https://docs.python.org/3/library/index.html).\\n\\nSome of the most used modules are:\\n- **os:** provides a way to interact with the operating system.\\n- **sys:** provides a way to interact with the Python interpreter.\\n- **json:** provides a way to work with JSON data.\\n- **re:** provides a way to work with regular expressions.\\n- **math:** provides a way to work with mathematical operations.\\n- **random:** provides a way to work with random numbers.\\n- **datetime:** provides a way to work with dates and times.\\n- **urllib:** provides a way to work with URLs.It is a very useful module to work with APIs. We are going to use it in the next section to call the Google Cloud Vision API. \\n:::\\n\\n### Functions\\n\\nFunctions are a way to encapsulate a block of code that we can reuse in our program. In Python, we can define a function using the `def` keyword followed by the function name and the parameters. Let\'s see an example:\\n\\n```python\\ndef add(a, b):\\n    return a + b\\n\\nif __name__ == \\"__main__\\":\\n    print(add(1, 2))\\n```\\n\\nThe paremeters are the variables that we need to pass to the function to perform the task. In the example above, we define a function called `add` that takes two parameters `a` and `b`, and the function returns the sum of the values of the two parameters. We can call the function by using the function name followed by the parameters. In the example above, we call the function `add` with the parameters `1` and `2`. The function returns the value `3` and we print it in the console.\\n\\nIn our program, we have three functions that we need to implement, `read_image` and `call_face_detection_gcp_api`. The firts takes the image path as a parameter and returns the image data. The second takes the image data as a parameter send a request to the Google Cloud Vision API to detect faces in the image and returns the response. Let\'s see how we can translate this Pseudocode lines into Python:\\n\\n```python\\ndef read_image(image_path: str) -> bytes:\\n    # read and load the file into memory\\n    with open(image_path, \\"rb\\") as f:\\n        return f.read() # read the image\'s bytes\\n```\\n\\nThere is a new syntax here in the `read_image` function to be discussed. \\n\\n- **Function annotations:** Although it is not mandatory, we can specify the parameters\' type and the functions\' return value in Python. This is called function annotations, and it is very useful for other developers to know how to call the function and the return value. In the example above, we specify that the function takes a string as a parameter and returns a bytes object. However, this is not enforced by the Python interpreter, so we still have to check the type of the parameters programmatically. \\n\\nAnother good thing about function annotations is that It makes the function more readable and will also helps to avoid errors when function is called in other parts of the program.\\n\\n- **Context Managers:** It can also be noticed that we use the `with` statement to open the file in the `read_image` function. This blocks of code are called context managers in Python, and in this case it makes sure that the file is closed after the block of code is executed. We are going to discuss about context managers later in other articles since this is an advanced topic. For more information about context managers, you can check the [Python documentation](https://docs.python.org/3/reference/compound_stmts.html#with).\\n\\n\\n- **Encoding:** We can also see that we use the `rb` mode to open the file. This mode allows us to read the file as bytes so we can encode it in base64 to send it to the Google Cloud Vision API. That is required because the API only accepts images encoded in this format. For more information about the `rb` mode, you can check the [Python documentation](https://docs.python.org/3/library/functions.html#open), and face detection API documentation [here](https://cloud.google.com/vision/docs/detecting-faces).\\n\\n:::info Encoding data\\nEncodings are a way to represent a sequence of bytes in a different format. The most common encodings are ASCII, UTF-8, and base64. ASCII is a 7-bit encoding that represents the first 128 characters of Unicode. UTF-8 is a variable-length encoding that represents the first 1,112,064 characters of Unicode. Base64 is a way to represent binary data in ASCII characters and it is used to send binary data in text-based protocols such as HTTP. For more information about encodings, you can check the [Python documentation](https://docs.python.org/3/library/codecs.html#standard-encodings).\\n:::\\n\\n- **Error handling:** In order to catch the errors that can happen when we try to open a file or during the API call, we use the `try` and `except` statements. The `try` statement allows us to execute a block of code and catch the errors that can happen in the `except` statement. Let\'s see how to do this:\\n\\n```python\\ndef read_image(image_path: str) -> bytes:\\n    try:\\n        # read and load the file into memory\\n        with open(image_path, \\"rb\\") as f:\\n            return f.read() # read the image\'s bytes\\n    except Exception as e:\\n        raise Exception(\\"Error reading the image: \\", e)\\n```\\n\\n### Modules\\n\\nModules are a way to encapsulate a set of functions and classes that we can reuse in our programs. In Python, we can import a module using the `import` keyword followed by the module name. Let\'s see an example:\\n\\n```python\\nimport os\\nif __name__ == \\"__main__\\":\\n    print(os.path.exists(\\"image.jpg\\"))\\n```\\n\\nTo implement the `call_face_detection_gcp_api` function, we need to import the `urllib` module. This module provides a set of function we can use to call the Google Cloud Vision API. Let\'s see how to do this:\\n\\n```python showLineNumbers\\nimport base64\\nimport urllib.error\\nimport urllib.parse\\nimport urllib.request\\nimport json\\nimport os\\n\\n\\ndef read_image(image_path: str) -> bytes:\\n    \\"\\"\\"\\n    Read image from file and return as bytes\\n    :param image_path:\\n    :return:\\n    \\"\\"\\"\\n    # Read image\\n    with open(image_path, \\"rb\\") as image_file:\\n        # obtain image data\\n        return image_file.read()\\n\\n\\ndef image_to_base64(image_bytes: bytes) -> str:\\n    \\"\\"\\"\\n    Convert image to base64 string\\n    :param image_bytes:\\n    :return:\\n    \\"\\"\\"\\n    # Convert image to base64 string, so it can be sent to the API\\n    return base64.b64encode(image_bytes).decode(\\"utf-8\\")\\n\\n\\ndef call_face_detection_gcp_api(image_bytes: bytes, API_KEY: str = None) -> dict:\\n    \\"\\"\\"\\n    Call Google Cloud Platform Face Detection API\\n    :param API_KEY: API Key for Google Cloud Platform\\n    :param image_bytes: image as bytes\\n    :return:\\n    \\"\\"\\"\\n    api_url = f\\"https://vision.googleapis.com/v1/images:annotate?key={API_KEY}\\"\\n    image_base64 = image_to_base64(image_bytes)\\n    request_body = {\\n        \\"requests\\": [\\n            {\\n                \\"image\\": {\\n                    \\"content\\": image_base64\\n                },\\n                \\"features\\": [\\n                    {\\n                        \\"type\\": \\"FACE_DETECTION\\",\\n                        \\"maxResults\\": 10\\n                    }\\n                ]\\n            }\\n        ]\\n    }\\n    # Convert request body to JSON format\\n    request_body = json.dumps(request_body).encode(\\"utf-8\\")\\n    # Create request\\n    request = urllib.request.Request(api_url, data=request_body)\\n    # Set request header\\n    request.add_header(\\"Content-Type\\", \\"application/json\\")\\n    try:\\n        # Send request\\n        response = urllib.request.urlopen(request)\\n        # Read response body as bytes\\n        response_body_bytes = response.read()\\n        # # Convert response body to JSON format\\n        response_body_text = response_body_bytes.decode(\\"utf-8\\")\\n        # Convert response body to JSON format\\n        response_body_json = json.loads(response_body_text)\\n        # Convert response to JSON format\\n        return response_body_json[\\"responses\\"][0][\\"faceAnnotations\\"]\\n\\n    except urllib.error.HTTPError as e:\\n        # Get error message\\n        error_message = json.loads(e.read())[\\"error\\"][\\"message\\"]\\n        error_code = e.code\\n        if e.code == 400:\\n            error_status = \\"Bad Request\\"\\n        elif e.code == 401:\\n            error_status = \\"Unauthorized\\"\\n        elif e.code == 403:\\n            error_status = \\"Forbidden\\"\\n        elif e.code == 404:\\n            error_status = \\"Not Found\\"\\n        elif e.code == 500:\\n            error_status = \\"Internal Server Error\\"\\n        elif e.code == 503:\\n            error_status = \\"Service Unavailable\\"\\n        else:\\n            error_status = \\"Unknown Error\\"\\n\\n        raise Exception(f\\"Error {error_code} calling the GCP Face Detection API: {error_status} - {error_message}\\")\\n```\\n\\nFor more information about API calls, you can check the [Python documentation](https://docs.python.org/3/library/urllib.request.html).\\n\\n:::tip What is an REST API?\\nREST stands for Representational State Transfer. It is an architectural style for designing networked applications, that allows to expose data and functionality to external clients in public(wan) or private(lan) networks. Clients could be web applications, mobile applications, or even other services. For more information about REST APIs, you can check the [Wikipedia page](https://en.wikipedia.org/wiki/Representational_state_transfer).REST APIs are implemented using HTTP methods. The most common methods are `GET`, `POST`, `PUT`, `PATCH`, and `DELETE`, you can check the [Wikipedia page](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods). It also provides standard data formats to send and receive data, for instance `JSON` and `XML`. More information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages).\\n:::\\n\\nThe video below give you a quick overview of how REST APIs work:\\n\\n<center>\\n    <iframe width=\\"100%\\" height=\\"400\\" src=\\"https://www.youtube.com/embed/7YcW25PHnAA\\" f allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n</center>\\n\\n### Loops\\n\\nLoops are a way to execute a block of code multiple times. In Python, we can use the `for` loop to iterate over a list of elements. Let\'s see an example:\\n\\n```python\\nfor i in range(10):\\n    print(i)\\n```\\n\\nThe `range` function returns a list of numbers from 0 to 10. The `for` loop iterates over the list and prints each element. The `range` function can also receive a start and end value. Let\'s see an example:\\n\\n```python\\nfor i in range(5, 10):\\n    print(i)\\n```\\n\\nThe `range` function can also receive a step value. Let\'s see an example:\\n\\n```python\\nfor i in range(5, 10, 2):\\n    print(i)\\n```\\n\\nThe `for` loop can also be used to iterate over a list of elements. Let\'s see an example:\\n\\n```python   \\nfor i in [1, 2, 3, 4, 5]:\\n    print(i)\\n```\\n\\nThe `for` loop can also be used to iterate over a dictionary. Let\'s see an example:\\n\\n```python\\nfor key, value in {\\"a\\": 1, \\"b\\": 2, \\"c\\": 3}.items():\\n    print(f\\"key: {key}, value: {value}\\")\\n```\\n\\nThe `for` loop can also be used to iterate over a string. Let\'s see an example:\\n\\n```python\\nfor char in \\"Hello World\\":\\n    print(char)\\n```\\n\\nThe `while` loop is used to execute a block of code while a condition is true. Let\'s see an example:\\n\\n```python\\ni = 0\\nwhile i < 10:\\n    print(i)\\n    i += 1\\n```\\n\\nIn our code in the last function of our script, we need to iterate over the list of faces returned by the API. Let\'s see how we do this in line `18`\\n\\n```python showLineNumbers {18-23}\\ndef detect_faces_on_image(image_bytes: bytes, API_KEY: str = None) -> list:\\n    \\"\\"\\"\\n    Detect faces on image\\n    :param API_KEY: API Key for Google Cloud Platform\\n    :param image_bytes: image as bytes\\n    :return:\\n    \\"\\"\\"\\n    # Call Google Cloud Platform Face Detection API\\n    api_response = call_face_detection_gcp_api(image_bytes, API_KEY)\\n\\n    # Check if API response is empty\\n    if not api_response:\\n        print(\\"No faces found\\")\\n        return []  # return empty list\\n\\n    # Create list to store faces\\n    faces = []\\n    for json_entity in api_response:\\n        face = {\\n            \\"bounding_box\\": json_entity[\\"boundingPoly\\"],\\n            \\"is_happy\\": json_entity[\\"joyLikelihood\\"] in [\\"VERY_LIKELY\\", \\"LIKELY\\"],\\n        }\\n        faces.append(face)\\n    return faces\\n```\\n\\nI have skipped the `call_face_detection_gcp_api` function implementation since It was supposed to be an introductory tutorial. However, I have tried my best to comment on the code. To get more information about how to call the `GCP face detection API,` you can check the official documentation [here](https://cloud.google.com/vision/docs/detecting-faces). You must create a Google Cloud Platform account to use the API. To see how to create the project and get the API key, you can check the [official documentation](https://cloud.google.com/vision/docs/libraries#client-libraries-install-python).\\n\\nIn the next section, we will see how to do more advance things with Python using third party packages and libraries. For now I will leave you with the full code of the script:\\n\\n```python showLineNumbers\\nimport base64\\nimport urllib.error\\nimport urllib.parse\\nimport urllib.request\\nimport json\\nimport os\\n\\n\\ndef read_image(image_path: str) -> bytes:\\n    \\"\\"\\"\\n    Read image from file and return as bytes\\n    :param image_path:\\n    :return:\\n    \\"\\"\\"\\n    # Read image\\n    with open(image_path, \\"rb\\") as image_file:\\n        # obtain image data\\n        return image_file.read()\\n\\n\\ndef image_to_base64(image_bytes: bytes) -> str:\\n    \\"\\"\\"\\n    Convert image to base64 string\\n    :param image_bytes:\\n    :return:\\n    \\"\\"\\"\\n    # Convert image to base64 string, so it can be sent to the API\\n    return base64.b64encode(image_bytes).decode(\\"utf-8\\")\\n\\n\\ndef call_face_detection_gcp_api(image_bytes: bytes, API_KEY: str = None) -> dict:\\n    \\"\\"\\"\\n    Call Google Cloud Platform Face Detection API\\n    :param API_KEY: API Key for Google Cloud Platform\\n    :param image_bytes: image as bytes\\n    :return:\\n    \\"\\"\\"\\n    api_url = f\\"https://vision.googleapis.com/v1/images:annotate?key={API_KEY}\\"\\n    image_base64 = image_to_base64(image_bytes)\\n    request_body = {\\n        \\"requests\\": [\\n            {\\n                \\"image\\": {\\n                    \\"content\\": image_base64\\n                },\\n                \\"features\\": [\\n                    {\\n                        \\"type\\": \\"FACE_DETECTION\\",\\n                        \\"maxResults\\": 10\\n                    }\\n                ]\\n            }\\n        ]\\n    }\\n    # Convert request body to JSON format\\n    request_body = json.dumps(request_body).encode(\\"utf-8\\")\\n    # Create request\\n    request = urllib.request.Request(api_url, data=request_body)\\n    # Set request header\\n    request.add_header(\\"Content-Type\\", \\"application/json\\")\\n    try:\\n        # Send request\\n        response = urllib.request.urlopen(request)\\n        # Read response body as bytes\\n        response_body_bytes = response.read()\\n        # # Convert response body to JSON format\\n        response_body_text = response_body_bytes.decode(\\"utf-8\\")\\n        # Convert response body to JSON format\\n        response_body_json = json.loads(response_body_text)\\n        # Convert response to JSON format\\n        return response_body_json[\\"responses\\"][0][\\"faceAnnotations\\"]\\n\\n    except urllib.error.HTTPError as e:\\n        # Get error message\\n        error_message = json.loads(e.read())[\\"error\\"][\\"message\\"]\\n        error_code = e.code\\n        if e.code == 400:\\n            error_status = \\"Bad Request\\"\\n        elif e.code == 401:\\n            error_status = \\"Unauthorized\\"\\n        elif e.code == 403:\\n            error_status = \\"Forbidden\\"\\n        elif e.code == 404:\\n            error_status = \\"Not Found\\"\\n        elif e.code == 500:\\n            error_status = \\"Internal Server Error\\"\\n        elif e.code == 503:\\n            error_status = \\"Service Unavailable\\"\\n        else:\\n            error_status = \\"Unknown Error\\"\\n\\n        raise Exception(f\\"Error {error_code} calling the GCP Face Detection API: {error_status} - {error_message}\\")\\n\\n\\ndef detect_faces_on_image(image_bytes: bytes, API_KEY: str = None) -> list:\\n    \\"\\"\\"\\n    Detect faces on image\\n    :param API_KEY: API Key for Google Cloud Platform\\n    :param image_bytes: image as bytes\\n    :return:\\n    \\"\\"\\"\\n    # Call Google Cloud Platform Face Detection API\\n    api_response = call_face_detection_gcp_api(image_bytes, API_KEY)\\n\\n    # Check if API response is empty\\n    if not api_response:\\n        print(\\"No faces found\\")\\n        return []  # return empty list\\n\\n    # Create list to store faces\\n    faces = []\\n    for json_entity in api_response:\\n        face = {\\n            \\"bounding_box\\": json_entity[\\"boundingPoly\\"],\\n            \\"is_happy\\": json_entity[\\"joyLikelihood\\"] in [\\"VERY_LIKELY\\", \\"LIKELY\\"],\\n        }\\n        faces.append(face)\\n    return faces\\n\\n\\ndef main():\\n    image_path = input(\\"Please provide the path of the image:\\")\\n    if image_path == \\"\\" or not os.path.exists(image_path):\\n        print(\\"image path could not be empty or the image does not exist\\")\\n        exit()\\n\\n    image = read_image(image_path)\\n    faces = detect_faces_on_image(image, API_KEY=\\"AIzaSyAshVsKfrMlAkXxtb2uQ_N_ohS343A6oHk\\")\\n    print(\\"number of faces found:\\", len(faces))\\n    for face in faces:\\n        print(face[\\"is_happy\\"])\\n\\n\\nif __name__ == \\"__main__\\":\\n    main()\\n\\n```\\n\\nThis is all for this tutorial. I hope you enjoyed it. If you have any questions, please leave a comment below or contact me on LinkedIn. If you want to see more tutorials like this, please subscribe to my newsletter (See top menu). To access the code for this tutorial, you can check the [GitHub repository](https://github.com/haruiz/blog-code/blob/main/python-for-data-science-exploring-the-syntax/main.py)\\n\\n\\n## Useful Links\\n- [GCP Face Detection API](https://cloud.google.com/vision/docs/detecting-faces)\\n- [GCP Machine Learning APIs](https://cloud.google.com/products/ai)\\n- [Python Cheat Sheet](https://www.pythoncheatsheet.org/)\\n- [Python Documentation](https://docs.python.org/3/)\\n- [Python Tutorial](https://docs.python.org/3/tutorial/index.html)\\n- [Python Standard Library](https://docs.python.org/3/library/index.html)\\n- [Python Package Index](https://pypi.org/)\\n- [Python for Data Science](https://www.python.org/about/apps/)\\n- [What is a REST API?](https://www.youtube.com/watch?v=lsMQRaeKNDk&ab_channel=IBMTechnology)\\n- [What is JSON?](https://www.youtube.com/watch?v=iiADhChRriM&ab_channel=IBMTechnology)"},{"id":"introduction-to-reinforcement-learning","metadata":{"permalink":"/blog/introduction-to-reinforcement-learning","source":"@site/blog/2022-09-06-introduction-to-reinforcement-learning/index.md","title":"Introduction to Reinforcement Learning","description":"Introduction to Reinforcement Learning","date":"2022-09-06T00:00:00.000Z","formattedDate":"September 6, 2022","tags":[{"label":"python","permalink":"/blog/tags/python"},{"label":"data-science","permalink":"/blog/tags/data-science"}],"readingTime":5.39,"hasTruncateMarker":false,"authors":[{"name":"Henry Ruiz","title":"Blog Author","url":"https://github.com/haruiz","imageURL":"https://github.com/haruiz.png","key":"haruiz"}],"frontMatter":{"title":"Introduction to Reinforcement Learning","slug":"introduction-to-reinforcement-learning","description":"Introduction to Reinforcement Learning","authors":["haruiz"],"tags":["python","data-science"]},"prevItem":{"title":"Python for Data Science - Exploring the syntax","permalink":"/blog/python-for-data-science-exploring-the-syntax"},"nextItem":{"title":"Python for Data Science - Getting started","permalink":"/blog/python-for-data-science-part-getting-started"}},"content":"I\'m so excited about this topic. I have been learning about Reinforcement Learning for a while taking a course in my Ph.D. and I would like to share my knowledge with you. I will do my best to going through the basics of Reinforcement Learning, how to implement it in Python and also share some resources that I have found useful to learn about this topic. I hope as I do you enjoy this journey.\\n\\n# Machine Learning\\n\\nThe idea that we learn by interacting with our environment is probably the first to come to our mind when we think about the nature of learning. We learn by interacting with our enviroment, we learn by doing. This is the idea behind Reinforcement Learning. Reinforcement Learning is a branch of Machine Learning that is focused on learning by interacting with our enviroment. In this post, I will try to explain the basics of Reinforcement Learning and how to implement it in Python.\\n\\nWhen we think about learning in machine learning context, it is related on how our algorithm is able to establish rules based on patterns found in the data that are discovered in different ways:\\n\\n# TODO discuss here the different ways to discover patterns in data\\n\\n**Supervised Learning:** The algorithm is presented with observations that have been labeled, its goal to learn the relationship between the provided features and the labels.\\n\\n\\n# what is Reinforcement Learning?\\n\\nRichard S. Sutton and Andrew G. Barto define Reinforcement Learning as:\\n\\nSystems that wants something, that adapts its behaviour to achieve that goal, and that receives feedback about its performance. Thi was the idea of a \\"hedonistic\\" learning systems, or as we call it today, Reinforcement Learning.\\n\\nThe problem of learning from interaction to achieve goals is still far from being solved, but our understanding of it has improved significantly in the last few years, thanks to some new ideas that have been placed  such as temporal-difference, dynamic programming and function approximation that are considered key to explore further how to approach this problem. In this posts series, I will try to explain some of thse concepts and how they are the foundations of the reinforcement learning algorithms.   \\n\\nExplore the computational aspects to learn from interaction based on the foundations of the \\"hedonistic\\" learning systems.\\nHowever rarer than try to study the aspects behind how people or animals learn, RL as research area is focus on explore idealized learning situations and evaluate the effectiveness of various learning methods.\\n\\nReinforcement Learning is a subfield of Machine Learning that is concerned with how an agent can learn to take actions in an environment to maximize the total reward. The agent is a software that interacts with the environment and the environment is the world that the agent is living in. The agent takes actions in the environment and the environment gives the agent feedback in the form of rewards. The agent learns to take actions that maximize the total reward.\\n\\nIn summary Reinforcement learning is learning what to do\u2014how to map situations to actions\u2014so as to maximize a numerical reward signal. The learner is not told which actions to take, but instead must discover which actions yield the most reward by trying them. add reference to the book...\\n\\nSo the different algorithms and techniques are around the fact that: \\n\\n\\"...The learner is not told which actions to take, but instead must discover which actions yield the most reward by trying them..\\"\\n\\n\\nReinforcement learning is different from supervised learning. In supervised learning, the learner is given a set of inputs and the desired outputs, and the goal is to learn a mapping from the inputs to the outputs. In reinforcement learning, the learner is given a set of inputs and a numerical reward signal, and the goal is to learn a mapping from the inputs to actions that maximize the total reward. \\n\\nIn interactive problems is often impractical to obtain examples of the desired output for every possible input as a response of an agent performing an specific action in the environment. In reinforcement learning, the learner must discover the desired output by trial and error, learning by its own experience.\\n\\n# Exploration and Exploitation\\n\\nWhat made reinforcement learning different from other kinds of learning , is the trade-off between exploration and exploitation. The agent must learn to balance between exploring the environment to find new actions that may lead to high rewards and exploiting the actions that are known to lead to high rewards. This trade-off is known as the exploration-exploitation dilemma.\\n\\n# context\\nAnother key feature of reinforcement learning in comparison with others approaches, where they are focusin try to solve an specific task without takimg in consideration how it might fit in the big picture. in RF it considers the whole problem of a goal-directed agent inetracting with its environment as a single learning problem. This is known as the context of the problem. In other words, the agent is not only learning to maximize the reward, but also learning how to act in the environment. This is the context of the problem.\\n\\n\\n# Reinforcement Learning Applications\\n\\n\\n\\n# Element of reinforcement learning\\n\\nBeyond of the agent and the environment, there are four main elements in a reinforcement learning system:\\n\\n# Policy\\n\\nThe policy is the agent\'s strategy for selecting actions. The policy is a function that maps from the agent\'s current state to the action that the agent should take. The policy is the agent\'s brain. The policy is the agent\'s strategy for selecting actions. The policy is a function that maps from the agent\'s current state to the action that the agent should take. The policy is the agent\'s brain.\\n\\n# Reward signal\\n\\nThe reward signal is a numerical value that the agent receives from the environment in response to its actions. The reward signal is the agent\'s only feedback signal. The reward signal is a numerical value that the agent receives from the environment in response to its actions. The reward signal is the agent\'s only feedback signal. It indicates to the agenct if the performed action was good or bad. \\n# Value function    \\n\\nWe seek for action that bring about states of highest value (over the long run), not highest reward.\\n\\nRewards are given directly by the enviroment as a response of performa anction, but values must be estimated and re-estimated from the sequence of observation and agent makes over its entire lifetime.\\n\\n# Model of the environment"},{"id":"python-for-data-science-part-getting-started","metadata":{"permalink":"/blog/python-for-data-science-part-getting-started","source":"@site/blog/2022-08-27-python-for-data-science-getting-started/index.md","title":"Python for Data Science - Getting started","description":"Thinking about jumping into a data science role, but you don\'t know why you should learn how to program and which programming language to choose? In this post, I will show you how to use python and discuss why this programming language is considered one of the top used in data science.","date":"2022-08-27T00:00:00.000Z","formattedDate":"August 27, 2022","tags":[{"label":"python","permalink":"/blog/tags/python"},{"label":"data-science","permalink":"/blog/tags/data-science"}],"readingTime":6.245,"hasTruncateMarker":true,"authors":[{"name":"Henry Ruiz","title":"Blog Author","url":"https://github.com/haruiz","imageURL":"https://github.com/haruiz.png","key":"haruiz"}],"frontMatter":{"title":"Python for Data Science - Getting started","slug":"python-for-data-science-part-getting-started","image":"https://haruiz.github.io/img/2022-08-27-python-for-data-science-getting-started-og-image.jpg","description":"Thinking about jumping into a data science role, but you don\'t know why you should learn how to program and which programming language to choose? In this post, I will show you how to use python and discuss why this programming language is considered one of the top used in data science.","authors":["haruiz"],"tags":["python","data-science"]},"prevItem":{"title":"Introduction to Reinforcement Learning","permalink":"/blog/introduction-to-reinforcement-learning"},"nextItem":{"title":"Python environments with pyenv and poetry","permalink":"/blog/python-environments-with-pyenv-and-poetry"}},"content":"\x3c!--truncate--\x3e\\n\\nimport TermynalReact from \\"@site/src/components/Termynal\\";\\nimport VideoPlayer from \\"@site/src/components/VideoPlayer\\";\\n\\n## Introduction\\n\\nProgramming is an essential skill for data scientists. If you are considering starting a data science career, the sooner you learn how to code, the better it will be. Most data sciences jobs rely on programming to automate cleaning and organizing data sets, design databases, fine-tune machine learning algorithms, etc. Therefore, having some experience in programming Languages such as Python, R, and SQL makes your life easier and will allow you to automate your analysis pipelines.\\n\\nIn this week\'s post, we will focus on Python. A general-purpose programming language that allows us to work with data and explore different algorithms and techniques that would be extremely useful to add to our analysis toolbox.\\n\\n### Why should I learn how to program?\\n\\n\\nTo help organizations make better decisions,  a data scientist is a technical expert who uses mathematical and statistical techniques to manipulate, analyze and extract patterns from raw/noisy data to produce information. Those tools include but are not limited to statistical inference, pattern recognition, machine learning, deep learning, etc. \\n\\nData Scientist\'s responsibilities involve:\\n\\n- Work closely with business stakeholders to understand their goals and determine how data can be used to achieve them.  \\n- Fetching information from various sources and analyzing it to get a clear understanding of how an organization performs\\n- Undertaking data collection, preprocessing, and analysis\\n- Building models to address business problems\\n-  Presenting information in a way that your audience can understand using different data visualization techniques\\n\\nAlthough programming is not required to be a data scientist, taking advantage of the power of computers, most of these tasks can be automated. So, programming skills provide data scientists with the superpowers to manipulate, process, and analyze big datasets, automate and develop computational algorithms to produce results (faster and more effectively), and create neat visualizations to present the data more intuitively.\\n\\n<iframe width=\\"100%\\" height=\\"400\\" src=\\"https://www.youtube.com/embed/dU1xS07N-FA\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n## Programming languages for data science\\n\\nThere are hundreds of programming languages out there, built for diverse purposes. Some are better suited for web or mobile development, others for data analysis, etc. Choosing the correct language to use will depend on your level of experience, role, and/or project goals. In the last few years, Python has been ranked as one of the top programming languages data scientists use to manipulate, process, and analyze big datasets.\\n\\nBut why is Python so popular? Well, I will list some reasons why data scientists love Python and what makes this language suitable for high productivity and performance in processing large amounts of data.\\n\\n### Why Python?\\n\\n- Python is **open source**, so is freely available to everyone.You can even use it to develop commercial applications.\\n- Python is **Multi-Platform**. It can be run on any platform, including Windows, Mac, Linux, and Raspberry Pi.\\n- Python is a **Multi-paradigm** language, which means it can be used for both object-oriented and functional programming. It comes from you writing code in a way that is easy to read and understand.\\n- Python is **Multi-purpose**, so you can use it to develop almost any kind of application. You can use it to develop web applications, game development, data analysis, machine learning, and much more.\\n- Python syntax is **easy to read** and **easy to write**. So the learning curve is low in comparison to other languages.\\n- Data Science **packages ecosystem**: Python also has [PyPI package index,a python package repository](https://pypi.org/), where you can find many useful packages (Tensorflow, pandas, NumPy, etc.), which facilitates and speeds up your project\'s development. In PyPI, you can also publish your packages and share them with the community. The ecosystem keeps growing fast, and big companies like Google, Facebook, and IBM contribute by adding new packages.Some of the most used libraries for data science and machine learning are:\\n\\n  - [Tensorflow](https://www.tensorflow.org/), a high-performance numerical programming library for deep learning.\\n  - [Pandas](https://pandas.pydata.org/), a Python library for data analysis and manipulation.\\n  - [NumPy](https://www.numpy.org/), a Python library for scientific computing ( that offers an extensive collection of advanced mathematical functions, including linear algebra, Fourier transforms, random number generation, etc.)\\n  - [Matplotlib](https://matplotlib.org/), a Python library for plotting graphs and charts.\\n  - [Scikit-learn](https://scikit-learn.org/stable/index.html), a Python library for machine learning.\\n  - [Seaborn](https://seaborn.pydata.org/), a Python library for statistical data visualization.\\n\\n- **High performance:** Although some people complain about performance in Python (see [Why Python is so slow and how to speed it up](https://towardsdatascience.com/why-is-python-so-slow-and-how-to-speed-it-up-485b5a84154e)), mainly caused by some features such as dynamic typing, it is also simple to extend developing modules in other compiled languages like C++ or C which could [speed up your code by 100x.](https://towardsdatascience.com/write-your-own-c-extension-to-speed-up-python-x100-626bb9d166e7)\\n  \\nThe following section will introduce you to the Python programming language, and we will start learning its syntax.\\n\\n## Hands-on Tutorial\\n\\n:::tip\\nTo set up our python environment, we will use `pyenv` and `poetry.` You can learn more about these tools in the previous post.\\n[Python environments with pyenv and poetry](/blog/python-environments-with-pyenv-and-poetry)\\n:::\\n\\nWe will start with a simple program that prints \\"Hello World\\" on the screen, and from there, we will begin navigating into the python syntax, learning some of its keywords and essential building blocks. Start creating a folder called \\"python_demo\\" and a file called \\"hello_world.py.\\" To do so, run the following commands in the terminal:\\n\\n<TermynalReact lines ={[\\n{ type: \'input\', value: \'cd workspace\' , comment: \\"moving into the workspace directory. It could be any folder in your machine where you want to have your python_demo folder\\"},\\n{ type: \'input\', value: \'mkdir python_demo\' , comment: \\"creating the python_demo folder inside the workspace folder\\" },\\n{ type: \'input\', value: \'cd python_demo\' , comment: \\"going into the python_demo folder\\" },\\n{ type: \'input\', value: \'touch hello_world.py\' , comment: \\"creating the hello_world.py file inside the python_demo folder, in windows use the command type\\" },\\n{ type: \'input\', value: \\"pyenv version\\", comment: \\"checking the python version being used by pyenv to create the Python environment\\"},\\n{ type: \\"output\\", value: \\"python 3.10.0\\"},\\n{ type: \\"input\\", value: \\"poetry init\\", comment: \\"initialize poetry project into the python_demo directory\\"},\\n{ type: \\"input\\", value: \\"poetry install\\", comment: \\"create python environment within the folder\\"}\\n]} />\\n\\nIf all the command runs successfully, you should see the following folder structure:\\n\\n    \u251c\u2500\u2500 python_demo\\n    \u2502\xa0\xa0 \u251c\u2500\u2500 hello_world.py\\n    \u2502\xa0\xa0 \u251c\u2500\u2500 poetry.lock\\n    \u2502\xa0\xa0 \u2514\u2500\u2500 pyproject.toml\\n\\nAnd the `pyproject.toml` file should look like this:\\n\\n    [tool.poetry]\\n    name = \\"python_demo\\"\\n    version = \\"0.1.0\\"\\n    description = \\"\\"\\n    authors = [\\"Henry Ruiz  <henryruiz22@gmail.com>\\"]\\n    \\n    [tool.poetry.dependencies]\\n    python = \\"^3.10\\"\\n    \\n    [tool.poetry.dev-dependencies]\\n    \\n    [build-system]\\n    requires = [\\"poetry-core>=1.0.0\\"]\\n    build-backend = \\"poetry.core.masonry.api\\"\\n\\nYou can see that the Python version was set to 3.10.0. that will depend on the version of Python you are using with pyenv.\\n\\n:::tip\\nTo check the python version run the command `pyenv version` in the terminal.\\n:::\\n\\nTo open our python_demo folder in pycharm check the animation below.\\n\\n<VideoPlayer videoUrl={require(\\"./open-folder-pycharm.mp4\\").default} />\\n\\nAt this point, you should know how to create and run python files. So, in the coming tutorials, we will be working on the hello_world.py file, exploring the python syntax, and learning cool things about Python and data science.\\n\\nThanks for reading!, and I hope this tutorial helped you to get started with Python.\\n\\n\\n**Some useful resources**\\n\\n- [Python Tutorial](https://docs.python.org/3/tutorial/)\\n- [Python Language Reference](https://docs.python.org/3/reference/)\\n- [Python Data Science Handbook](https://jakevdp.github.io/PythonDataScienceHandbook/)\\n- [Why Coding is important in Data Science](https://www.dqindia.com/coding-important-data-science/)\\n- [Python for Data Science](https://www.geeksforgeeks.org/python-for-data-science/)\\n- [Top programming languages for data scientists in 2022](https://www.datacamp.com/blog/top-programming-languages-for-data-scientists-in-2022)\\n- [Why Python is so slow and how to speed it up](https://towardsdatascience.com/why-is-python-so-slow-and-how-to-speed-it-up-485b5a84154e)\\n- [Write Your Own C-extension to Speed Up Python by 100x](https://towardsdatascience.com/write-your-own-c-extension-to-speed-up-python-x100-626bb9d166e7)"},{"id":"python-environments-with-pyenv-and-poetry","metadata":{"permalink":"/blog/python-environments-with-pyenv-and-poetry","source":"@site/blog/2022-08-07-Python-environments-with-pyenv-and-poetry/index.md","title":"Python environments with pyenv and poetry","description":"If you have been using Python for a while or just started, you may have already noticed that handling different python-installations and dependencies(packages) can be a nightmare! So, having tools that enable us to isolate and manage our project\'s dependencies is highly convenient. In this post, I will show you how to use pyenv and poetry to create your code environments.","date":"2022-08-07T00:00:00.000Z","formattedDate":"August 7, 2022","tags":[{"label":"python","permalink":"/blog/tags/python"},{"label":"data-science","permalink":"/blog/tags/data-science"}],"readingTime":17.67,"hasTruncateMarker":true,"authors":[{"name":"Henry Ruiz","title":"Blog Author","url":"https://github.com/haruiz","imageURL":"https://github.com/haruiz.png","key":"haruiz"}],"frontMatter":{"title":"Python environments with pyenv and poetry","slug":"python-environments-with-pyenv-and-poetry","hide_table_of_contents":false,"image":"https://haruiz.github.io/img/2022-08-07-Python-environments-with-pyenv-and-poetry-og_image.png","description":"If you have been using Python for a while or just started, you may have already noticed that handling different python-installations and dependencies(packages) can be a nightmare! So, having tools that enable us to isolate and manage our project\'s dependencies is highly convenient. In this post, I will show you how to use pyenv and poetry to create your code environments.","authors":["haruiz"],"tags":["python","data-science"]},"prevItem":{"title":"Python for Data Science - Getting started","permalink":"/blog/python-for-data-science-part-getting-started"}},"content":"\x3c!--truncate--\x3e\\n\\nimport TermynalReact from \\"@site/src/components/Termynal\\";\\n\\nimport TOCInline from \'@theme/TOCInline\';\\n\\nimport Image from \'@theme/IdealImage\';\\n\\nimport Tabs from \'@theme/Tabs\';\\n\\nimport TabItem from \'@theme/TabItem\';\\n\\n[//]: # ()\\n[//]: # (:::tip In this post you will learn)\\n\\n[//]: # ()\\n[//]: # (<TOCInline toc={toc} />)\\n\\n[//]: # ()\\n[//]: # (:::)\\n\\n\\n### Why Python?\\n\\nAccording to the [**2022 stack overflow developer survey**](https://survey.stackoverflow.co/2022/#technology-most-loved-dreaded-and-wanted), Python is one of the most widely used programming languages today. Of 71,467 responses, 68% of developers expressed that they love the language and are planning to continue working with Python, and approximately 12.000 of those who haven\'t got the chance to use it have expressed their interest in starting developing with it. Its popularity is mainly due to its simplicity in syntax, expressiveness, and versatility. We can use Python to create any kind of software, from web applications to scientific computing.\\n\\n\\nPython also has [**PyPI package index**](https://pypi.org/),a python package repository, where you can find many useful packages (Tensorflow, pandas, NumPy, etc.), which facilitates and speeds up your project\'s development. In PyPI, you can also publish your packages and share them with the community. The ecosystem keeps growing fast, and big companies like Google, Facebook, and IBM contribute by adding new packages. \\n\\n:::info\\nThe Python Package Index, abbreviated as PyPI (/\u02ccpa\u026api\u02c8a\u026a/) and also known as the Cheese Shop (a reference to the Monty Python\'s Flying Circus sketch \\"Cheese Shop\\"), is the official third-party software repository for Python. It is analogous to the CPAN repository for Perl and to the CRAN repository for R.<a href=\\"#wikipedia:1\\">[1]</a>\\n:::\\n### Python Dependency hell\\n\\n\\nWell, it sounds like Python is amazing! However, if you have been using Python for a while, you may have already noticed that handling different python-installations and dependencies(packages) can be a nightmare! An issue commonly known as dependency hell, which is a term associated with the frustration arising from problems managing our project\'s dependencies. \\n\\nDependency hell in Python often happens because pip does not have a dependency resolver and because all dependencies are shared across projects. So, other projects could be affected when a given dependency may need to be updated or uninstalled. \\n\\nOn top of it, since Python doesn\'t distinguish between different versions of the same library in the `/site-packages` directory, this leads to many conflicts when you have two projects requiring different versions of the same library or the global installation doesn\'t match.\\n\\nThus, having tools that enable us to isolate and manage our project\'s dependencies is highly convenient. In this post, I will show you how to use pyenv and poetry to create your code environments.\\n\\n<div style={{textAlign: \\"center\\"}}>\\n    <Image img={require(\\"./dependency-hell.png\\")} alt=\\"Dependency hell\\" />\\n</div>\\n\\n### Virtual environments to the rescue!\\n\\nA Python virtual environment is a separate folder where only your project\'s dependencies(packages) are located. Each virtual environment has its own Python binary (which matches the version of the binary that was used to create this environment) and its own independent set of installed Python packages in its site directories. That is a very convenient way to prevent `Dependency Hell.`\\n\\n:::tip\\nPython virtual environment allows multiple versions of Python to coexist in the same machine, so you can test your application using different Python versions. It also keeps your project\'s dependencies isolated, so they don\'t interfere with the dependencies of others projects.\\n:::\\n\\nThere are different tools out there that can be used to create Python virtual environments. In this post, I will show you how to use pyenv and poetry. However, you can also try other tools, such as [virtualenv](https://virtualenv.pypa.io/en/latest/) or anaconda, and based on your experience, you can choose that one you feel most comfortable with.\\nthe video below will provide you with more information about these kinds of tools.\\n\\n<center>\\n    <iframe width=\\"100%\\" height=\\"400\\" src=\\"https://www.youtube.com/embed/3J02sec99RM\\" f allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n</center>\\n\\n### Pyenv\\npyenv is a command line tool which allows you to install and run multiple versions of Python in the same machine. For those who come from a javascript background, pyenv is a very similar tool to nvm.\\n\\n**Setup & get started with pyenv**\\n\\nYou can follow the steps below for installing `pyenv` on macOS or check the [documentation](https://github.com/pyenv/pyenv) for alternative installation methods. \\n\\n<TermynalReact lines ={[\\n{ type: \'input\', value: \'curl https://pyenv.run | bash\', comment: \\"Install pyenv\\"},\\n{type: \'output\', value: \'Installing pyenv...\'},\\n{type: \'output\', value: \'Installation complete!\'}\\n]} />\\n\\n\\nAfter having installed pyenv, you can then install any python version running the command `pyenv install <version>`.\\n<TermynalReact lines ={[\\n{ type: \'input\', value: \'pyenv install 3.9.0\', comment: \\"Install python 3.9.0 in my machine\\"},\\n{type: \'output\', value: \'Downloading Python-3.9.0.tar.xz...\'},\\n{type: \'output\', value: \'-> https://www.python.org/ftp/python/3.7.6/Python-3.7.6.tar.xz\', delay: 1000},\\n{type: \'progress\'},\\n{type: \'output\', value: \'Installed Python-3.9.0 to /Users/haruiz/.pyenv/versions/3.9.0\'}\\n]} />\\n\\n:::tip\\nif you are not sure about which versions are available to be installed in your machine, you can run the command `pyenv install --list`.\\n:::\\n\\nYou can run the command `pyenv versions` to check which Python versions have been installed.\\n\\n<TermynalReact lines ={[\\n{ type: \'input\', value: \'pyenv versions\' , comment: \\"Check which versions of Python are installed\\"},\\n{type: \'output\', value: \'system\'},\\n{type: \'output\', value: \'* 3.10.0 (set by /Users/haruiz/.pyenv/version)\'},\\n{type: \'output\', value: \'3.9.0\'}\\n]} />\\n\\nTo set the default version of Python to be used, you can run the command `pyenv global <version>`. This version will be used when you run `python` or `python3` in your terminal.\\n\\n<TermynalReact lines ={[\\n{type: \'input\', value: \'pyenv global 3.10.0\', comment: \\"Set python 3.10.0 as the default version\\"},\\n{type: \'input\', value: \'python --version\', comment: \\"Check the version of python after setting it\\"},\\n{type: \'output\', value: \'Python 3.9.0\'},\\n]} />\\n\\nAlternatively to the `pyenv global` command, Sometimes you want to set a specific version of Python to be used within a specific folder. You can create a `.python-version` file in the folder and set the version you want to use,  or by running the command `pyenv local <version>`. pyenv will then use this version when you run `python` or `python3` in the folder.\\n\\n<TermynalReact lines ={[\\n{ type: \'input\', value: \'mkdir myproject\', comment: \\"Create a folder called myproject\\"},\\n{type: \'input\', value: \'cd myproject\', comment: \\"Change directory to myproject\\"},\\n{type: \'input\', value: \'pwd\',  comment: \\"Check the current directory after the cd command\\"},\\n{type: \'output\', value: \'/Users/haruiz/myproject\'},\\n{type: \'input\', value: \'pyenv local 3.9.0\', comment: \\"Set python 3.9.0 as the default version in myproject\\"},\\n{type: \'input\', value: \'python --version\', comment: \\"Check the version of python after setting it\\"},\\n{type: \'output\', value: \'Python 3.9.0\'},\\n]} />\\n\\nTo make sure what python version is being used by pyenv, you can run the command `pyenv version`.\\n\\n### Poetry\\n\\nPoetry is a tool that allows you to manage your project\'s dependencies and facilitates the process of packaging for distribution. It resolves your project dependencies and makes sure that there are no conflicts between them.\\n\\nPoetry integrates with the [PyPI](https://pypi.org/) package index to find and install your environment dependencies, and pyenv to set your project python runtime.\\n\\nTo install poetry we follow the steps below:\\n\\n<TermynalReact lines ={[\\n{ type: \'input\', value: \'curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python\', comment: \\"Install poetry\\"},\\n{type: \'progress\'},\\n{type: \'output\', value: \'Installation complete!\'},\\n{type: \\"input\\", value: `export PATH=\\"\\\\$HOME/.poetry/bin:\\\\$PATH\\"`, comment: \\"Add poetry to the PATH\\"},\\n{type: \'input\', value: \'poetry --version\', comment: \\"Check the version of poetry after installing it\\"},\\n{type: \'output\', value: \'Poetry version 1.1.13\'},\\n{type: \'input\', value: \'poetry help completions\', comment: \\"Check the completions of poetry\\"},\\n{type: \'output\', value: \'poetry completions bash\'},\\n{type: \'input\', value: \'poetry config virtualenvs.in-project true\', comment: \\"Configure poetry to create virtual environments inside the project\'s root directory\\"}\\n]} />\\n\\nIf you were able to run the previous commands, we can then move forward with the rest of the tutorial.\\n\\nTo ask poetry to create a new project, we use the command `poetry new <project name>`. \\nThis will create a new folder with the name `<project name>` and a `pyproject.toml` folder inside it.\\n\\n<TermynalReact lines ={[\\n    { type: \'input\', value: \'poetry new myproject\', comment: \\"Create a new project called myproject\\"},\\n    {type: \'output\', value: \'Created package myproject in myproject\'}\\n]} />\\n\\nIf you already have a project, and you want to use poetry to manage the dependencies, you can use the command `poetry init`. So, poetry will add the `pyproject.toml` file to your project.\\n\\n<TermynalReact lines ={[\\n    { type: \'input\', value: \'cd myproject\', comment: \\"Change directory to myproject\\"},\\n    { type: \'input\', value: \'poetry init\', comment: \\"Initialize poetry in myproject\\"},\\n]} />\\n\\n\\nThe main file of your poetry project is the `pyproject.toml` file. This file defines your project\'s dependencies(python packages) and holds the required metadata for packaging. Poetry updates this file every time a new python package is installed. By sharing this file with others, they can recreate your project environment and run your application. To do so, they will need to have poetry installed and run the command `poetry install` within the same folder where the `pyproject.toml` file is located.\\n\\nNow we can start adding dependencies to our project. To do so, we use the command `poetry add <package name>`.\\n\\n<TermynalReact lines ={[\\n    { type: \'input\', value: \'poetry add numpy pandas\', comment: \\"Add numpy and pandas to the project, this command replaces the pip install command\\"},\\n    {type: \'output\', value: \'Installed requests\'}\\n]} />\\n\\nNow our `pyproject.toml` file looks like:\\n\\n    [tool.poetry]\\n    name = \\"myproject\\"\\n    version = \\"0.1.0\\"\\n    description = \\"\\"\\n    authors = [\\"Henry Ruiz  <henry.ruiz.tamu@gmail.com>\\"]\\n    \\n    [tool.poetry.dependencies]\\n    python = \\"^3.10\\"\\n    numpy = \\"^1.23.1\\"\\n    pandas = \\"^1.4.3\\"\\n    \\n    [tool.poetry.dev-dependencies]\\n    pytest = \\"^5.2\\"\\n    \\n    [build-system]\\n    requires = [\\"poetry-core>=1.0.0\\"]\\n    build-backend = \\"poetry.core.masonry.api\\"\\n\\nLest review that file sections:\\n\\n- **\\\\[tool.poetry\\\\]:** This section contains informational metadata about our package, such as the package name, description, author details, etc. Most of the config values here are optional unless you\'re planning on publishing this project as an official PyPi package. \\n- **\\\\[tool.poetry.dependencies\\\\]:** This section defines the dependencies of your project. Here is where you define the python packages that your project requires to run. We can update this file manually if it is needed.\\n- **\\\\[tool.poetry.dev-dependencies\\\\]:** This section defines the dev dependencies of your project. These dependencies are not required for your project to run, but they are useful for development.\\n- **\\\\[build-system\\\\]:** This is rarely a section you\'ll need to touch unless you upgrade your version of Poetry.\\n\\nTo see in a nicer format the dependencies of your project, you can use the command `poetry show --tree`. This command draws a graph of all of our dependencies as well as the dependencies of our dependencies.\\n\\n<TermynalReact lines ={[\\n    { type: \'input\', value: \'poetry show --tree\', comment: \\"Show the dependencies of our project\\"}]} />\\n\\nIf we are not sure at some point that we have the latest version of a dependency, we can tell poetry to check on our package repository if there is a new version by using \u201c\u2014 latest\u201d option\\n\\n<TermynalReact lines ={[\\n    { type: \'input\', value: \'poetry show --latest\', comment: \\"Show the latest version of our dependencies\\"}]} />\\n\\nIf we list our folder content, we will see that not only the `pyproject.toml` file is created, but also some other folders and files. So, let\'s take a look at the contents of the `myproject` folder.\\n\\n    \u251c\u2500\u2500 .venv\\n    \u2502\xa0\xa0 \u251c\u2500\u2500 .gitignore\\n    \u2502\xa0\xa0 \u251c\u2500\u2500 bin\\n    \u2502\xa0\xa0 \u251c\u2500\u2500 lib\\n    \u2502\xa0\xa0 \u2514\u2500\u2500 pyvenv.cfg\\n    \u251c\u2500\u2500 README.rst\\n    \u251c\u2500\u2500 myproject\\n    \u2502\xa0\xa0 \u2514\u2500\u2500 __init__.py\\n    \u251c\u2500\u2500 poetry.lock\\n    \u251c\u2500\u2500 pyproject.toml\\n    \u2514\u2500\u2500 tests\\n        \u251c\u2500\u2500 __init__.py\\n        \u2514\u2500\u2500 test_myproject.py\\n    \\n    5 directories, 11 files\\n\\n- **\\\\`.venv\\\\`**: This folder is created by poetry when it creates a virtual environment.It isolates the project from the system environment and provides a clean environment for your project. It contains the Python interpreter and your projects dependencies. \\n- **poetry.lock**: When Poetry finished installing the dependencies, it writes all of the packages and the exact versions of them to the poetry.lock file, locking the project to those specific versions. \\n\\n:::note\\n Notice that this folder structure is created only if the `poetry new myproject` was executed. When poetry is initialized within a folder that already exists ( using the `poetry init` command), only the `pryproject.toml` and the .env folder are created.\\n:::\\n\\n:::tip\\nYou should commit the poetry.lock file to your project repo so that all people working on the project are locked to the same versions of dependencies. For more info, check this link : [Poetry basic usage](https://python-poetry.org/docs/basic-usage/)\\n:::\\n\\nBuilding our project and publishing it is just running the ```poetry build``` and ```poetry publish``` commands, so it is pretty intuitive. The publish command will submit our application to pip, so other developers can easily install it.\\n\\n### Hands-on tutorial \\n\\n**Creating a python package using poetry**\\n\\nIn this section, you will learn how to create a simple python package named `style_image` with poetry. This simple python package takes two images, the style image, and the content image, and performs style transfer. \\"Style transfer is an optimization technique used to take two images\u2014a content image and a style reference image (such as an artwork by a famous painter)\u2014and blend them together, so the output image looks like the content image, but \u201cpainted\u201d in the style of the style reference image.\\"<a href=\\"#tensorflow-docs:1\\">[2]</a>\\n\\nFor our `style_image` package we will use the `magenta/arbitrary-image-stylization-v1-256` model available in TensorflowHub under-the-hood.\\n\\nSo, let\'s do it!!\\n\\nWe will start by creating a new project called `style_image` using the command `poetry new style_image`.\\n\\n<TermynalReact lines ={[\\n    { type: \'input\', value: \'pyenv version\', comment: \\"Check the version of python that is being used by pyenv, it would be the python version that will be used by poetry\\"},\\n    { type: \'input\', value: \'poetry new style_image\', comment: \\"Create a new project called style_image\\"},\\n]} />\\n\\n**Installing package dependencies**\\n\\nNext we are going to install the dependencies of our project, so we run the commands:\\n\\n<TermynalReact lines ={[\\n    { type: \'input\', value: \'cd style_image\', comment: \\"Move into the style_image folder where the `pyproject.toml` file is located\\"},\\n    { type: \'input\', value: \'poetry add tensorflow-hub tensorflow numpy pillow validators \\"typer[all]\\"\', comment: \\"Add the dependencies to the project\\", lineDelay: 10.0},\\n    {type: \\"output\\", value: \\"Updating dependencies\\"}, \\n    {type: \\"output\\", value: \\"Resolving dependencies...\\"}, \\n    {type: \\"progress\\", progressPercent: 50},\\n    { type: \'output\', value: `Solver Problem : \\\\n \\nThe current project\\\\\'s Python requirement (>=3.10,<4.0) \\nis not compatible with \\nsome of the required packages Python requirement..... \\\\n\\nFor tensorflow, a possible solution would be to set the \'python\' property to \\">=3.10,<3.11\\"\\n                    `, color: \\"red\\"},\\n]} />\\n\\nWe will see that there is an error trying to install tensorflow:\\n\\n    Creating virtualenv style-image in /Users/haruiz/temp/style_image/.venv\\n    Using version ^0.12.0 for tensorflow-hub\\n    Using version ^2.9.1 for tensorflow\\n    Using version ^1.23.1 for numpy\\n    Using version ^9.2.0 for Pillow\\n    Using version ^0.20.0 for validators\\n    Using version ^0.6.1 for typer\\n    \\n    Updating dependencies\\n    Resolving dependencies... (4.2s)\\n    \\n      SolverProblemError\\n    \\n      The current project\'s Python requirement (>=3.10,<4.0) is not compatible with some of the required packages Python requirement:\\n        - tensorflow-io-gcs-filesystem requires Python >=3.7, <3.11, so it will not be satisfied for Python >=3.11,<4.0\\n\\nThe great thing is that poetry generally provides information on how to fix them. For the error above, poetry suggests restricting the python property to \\">=3.10,<3.11\\" in the pyproject.toml file. \\n\\n        For tensorflow-io-gcs-filesystem, a possible solution would be to set the `python` property to \\">=3.10,<3.11\\"\\n\\n:::tip\\nMake sure you always check the output in the terminal.\\n:::\\n\\nSo the `pyproject.toml` file is now:\\n\\n```toml showLineNumbers {9}\\n[tool.poetry]\\nname = \\"style_image\\"\\nversion = \\"0.1.0\\"\\ndescription = \\"\\"\\nauthors = [\\"Henry Ruiz  <henryruiz22@gmail.com>\\"]\\nreadme = \\"README.md\\"\\n\\n[tool.poetry.dependencies]\\npython = \\">=3.10,<3.11\\"\\n\\n[tool.poetry.dev-dependencies]\\npytest = \\"^5.2\\"\\nblack = \\"^22.6.0\\"\\n\\n[tool.poetry.scripts]\\nstyle_image = \\"style_image.main:app\\"\\n\\n[build-system]\\nrequires = [\\"poetry-core>=1.0.0\\"]\\nbuild-backend = \\"poetry.core.masonry.api\\"\\n```\\n\\nWe can then try to install the dependencies again:\\n\\n```bash\\npoetry add tensorflow-hub tensorflow numpy pillow validators \\"typer[all]\\"\\n```\\n\\nAfter installing the dependencies, our `pyproject.toml` file is now:\\n\\n```toml showLineNumbers {9-15}\\n[tool.poetry]\\nname = \\"style_image\\"\\nversion = \\"0.1.0\\"\\ndescription = \\"\\"\\nauthors = [\\"Henry Ruiz  <henryruiz22@gmail.com>\\"]\\nreadme = \\"README.md\\"\\n\\n[tool.poetry.dependencies]\\npython = \\">=3.10,<3.11\\"\\ntensorflow-hub = \\"^0.12.0\\"\\nnumpy = \\"^1.23.1\\"\\nPillow = \\"^9.2.0\\"\\ntensorflow = \\"^2.9.1\\"\\nvalidators = \\"^0.20.0\\"\\ntyper = {extras = [\\"all\\"], version = \\"^0.6.1\\"}\\n\\n[tool.poetry.dev-dependencies]\\npytest = \\"^5.2\\"\\nblack = \\"^22.6.0\\"\\n\\n[tool.poetry.scripts]\\nstyle_image = \\"style_image.main:app\\"\\n\\n[build-system]\\nrequires = [\\"poetry-core>=1.0.0\\"]\\nbuild-backend = \\"poetry.core.masonry.api\\"\\n```\\n\\n**Coding our `style_image` package**\\n\\nAt this point, we are ready to start coding, let\'s create the folder structure below and replace the code in each .py file with the code on this repository [https://github.com/haruiz/style_image](https://github.com/haruiz/style_image):\\n\\n    \u251c\u2500\u2500 README.md\\n    \u251c\u2500\u2500 README.rst\\n    \u251c\u2500\u2500 data\\n    \u2502\xa0\xa0 \u2514\u2500\u2500 content_image.jpg\\n    \u251c\u2500\u2500 main.py\\n    \u251c\u2500\u2500 poetry.lock\\n    \u251c\u2500\u2500 pyproject.toml\\n    \u251c\u2500\u2500 style_image\\n    \u2502\xa0\xa0 \u251c\u2500\u2500 __init__.py\\n    \u2502\xa0\xa0 \u251c\u2500\u2500 core\\n    \u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 __init__.py\\n    \u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 style_image.py\\n    \u2502\xa0\xa0 \u251c\u2500\u2500 main.py\\n    \u2502\xa0\xa0 \u2514\u2500\u2500 util\\n    \u2502\xa0\xa0     \u251c\u2500\u2500 __init__.py\\n    \u2502\xa0\xa0     \u251c\u2500\u2500 __pycache__\\n    \u2502\xa0\xa0     \u2514\u2500\u2500 image_utils.py\\n    \u251c\u2500\u2500 stylized_image.png\\n    \u2514\u2500\u2500 tests\\n        \u251c\u2500\u2500 __init__.py\\n        \u2514\u2500\u2500 test_style_image.py\\n\\nCode :\\n\\n\\n\\n<Tabs>\\n  <TabItem value=\\"main.py\\" label=\\"main.py\\" default>\\n\\n```python showLineNumbers \\nfrom style_image import StyleImage\\n\\nif __name__ == \\"__main__\\":\\n\\n    content_image_path = \\"data/content_image.jpg\\"\\n    style_image_path = \\"data/style_image.jpg\\"\\n\\n    stylized_image = (\\n        StyleImage(style_image_path)\\n        .transfer(content_image_path, output_image_size=800)\\n        .save(\\"stylized_image.jpg\\")\\n    )\\n```\\n\\n</TabItem>\\n  <TabItem value=\\"core/style_image.py\\" label=\\"core/style_image.py\\">\\n\\n```python showLineNumbers \\nimport tensorflow as tf\\nimport tensorflow_hub as hub\\n\\nfrom style_image.util import ImageUtils\\nfrom PIL import Image as PILImage\\n\\n\\nclass StyleImage:\\n    def __init__(self, style_image_path):\\n        self._style_image_path = style_image_path\\n        hub_handle = (\\n            \\"https://tfhub.dev/google/magenta/arbitrary-image-stylization-v1-256/2\\"\\n        )\\n        self._hub_module = hub.load(hub_handle)\\n\\n    def transfer(\\n        self, content_image_path, output_image_size=384, style_img_size=(256, 256)\\n    ):\\n        \\"\\"\\"\\n        transfer the style of the style image to the content image\\n        :param content_image_path: image path of the content image :\\n        :param output_image_size: The content image size can be arbitrary.\\n        :param style_img_size: The style prediction model was trained with image size 256 and it\'s the\\n        recommended image size for the style image (though, other sizes work as\\n        well but will lead to different results).\\n        Recommended to keep it at 256.\\n        :return:\\n        \\"\\"\\"\\n        content_img_size = (output_image_size, output_image_size)\\n        # Load the content and style images.\\n        content_image = ImageUtils.load_image(content_image_path, content_img_size)\\n        style_image = ImageUtils.load_image(self._style_image_path, style_img_size)\\n        # Stylize image.\\n        stylized_image_tensor = self._hub_module(\\n            tf.constant(content_image), tf.constant(style_image)\\n        )[0]\\n        stylized_image_arr = tf.image.convert_image_dtype(\\n            stylized_image_tensor, tf.uint8\\n        ).numpy()\\n        stylized_image_arr = stylized_image_arr[0]  # Remove batch dimension.\\n        stylized_image = PILImage.fromarray(stylized_image_arr)\\n        return stylized_image\\n```\\n\\n  </TabItem>\\n  <TabItem value=\\"util/image_utils.py\\" label=\\"util/image_utils.py\\">\\n\\n```python showLineNumbers \\nimport functools\\nimport tensorflow as tf\\nimport os\\nimport validators\\n\\n\\nclass ImageUtils:\\n    @staticmethod\\n    def crop_center(image):\\n        \\"\\"\\"Returns a cropped square image.\\"\\"\\"\\n        shape = image.shape\\n        new_shape = min(shape[1], shape[2])\\n        offset_y = max(shape[1] - shape[2], 0) // 2\\n        offset_x = max(shape[2] - shape[1], 0) // 2\\n        image = tf.image.crop_to_bounding_box(\\n            image, offset_y, offset_x, new_shape, new_shape\\n        )\\n        return image\\n\\n    @classmethod\\n    @functools.lru_cache(maxsize=None)\\n    def load_image(cls, image_path, image_size=(256, 256), \\n                   preserve_aspect_ratio=True):\\n        \\"\\"\\"Loads and preprocesses images.\\"\\"\\"\\n        # Cache image file locally.\\n        if validators.url(image_path):\\n            image_path = tf.keras.utils.get_file(\\n                os.path.basename(image_path)[-128:], image_path\\n            )\\n        # Load and convert to float32 numpy array, add batch dimension, and normalize to range [0, 1].\\n        img = tf.io.decode_image(\\n            tf.io.read_file(image_path), channels=3, dtype=tf.float32\\n        )[tf.newaxis, ...]\\n        img = cls.crop_center(img)\\n        img = tf.image.resize(\\n            img, image_size, preserve_aspect_ratio=preserve_aspect_ratio\\n        )\\n        return img\\n\\n``` \\n\\n  </TabItem>\\n<TabItem value=\\"style_image/main.py\\" label=\\"style_image/main.py\\">\\n\\n```python showLineNumbers \\nfrom style_image import StyleImage\\nimport typer\\n\\napp = typer.Typer()\\n\\n\\ndef style_image_callback(value: str):\\n    style_urls = dict(\\n        kanagawa_great_wave=\\"https://upload.wikimedia.org/wikipedia/commons/0/0a/The_Great_Wave_off_Kanagawa.jpg\\",\\n        kandinsky_composition_7=\\"https://upload.wikimedia.org/wikipedia/commons/b/b4/Vassily_Kandinsky%2C_1913_-_Composition_7.jpg\\",\\n        hubble_pillars_of_creation=\\"https://upload.wikimedia.org/wikipedia/commons/6/68/Pillars_of_creation_2014_HST_WFC3-UVIS_full-res_denoised.jpg\\",\\n        van_gogh_starry_night=\\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ea/Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg/1024px-Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg\\",\\n        turner_nantes=\\"https://upload.wikimedia.org/wikipedia/commons/b/b7/JMW_Turner_-_Nantes_from_the_Ile_Feydeau.jpg\\",\\n        munch_scream=\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Edvard_Munch%2C_1893%2C_The_Scream%2C_oil%2C_tempera_and_pastel_on_cardboard%2C_91_x_73_cm%2C_National_Gallery_of_Norway.jpg\\",\\n        picasso_demoiselles_avignon=\\"https://upload.wikimedia.org/wikipedia/en/4/4c/Les_Demoiselles_d%27Avignon.jpg\\",\\n        picasso_violin=\\"https://upload.wikimedia.org/wikipedia/en/3/3c/Pablo_Picasso%2C_1911-12%2C_Violon_%28Violin%29%2C_oil_on_canvas%2C_Kr%C3%B6ller-M%C3%BCller_Museum%2C_Otterlo%2C_Netherlands.jpg\\",\\n        picasso_bottle_of_rum=\\"https://upload.wikimedia.org/wikipedia/en/7/7f/Pablo_Picasso%2C_1911%2C_Still_Life_with_a_Bottle_of_Rum%2C_oil_on_canvas%2C_61.3_x_50.5_cm%2C_Metropolitan_Museum_of_Art%2C_New_York.jpg\\",\\n        fire=\\"https://upload.wikimedia.org/wikipedia/commons/3/36/Large_bonfire.jpg\\",\\n        derkovits_woman_head=\\"https://upload.wikimedia.org/wikipedia/commons/0/0d/Derkovits_Gyula_Woman_head_1922.jpg\\",\\n        amadeo_style_life=\\"https://upload.wikimedia.org/wikipedia/commons/8/8e/Untitled_%28Still_life%29_%281913%29_-_Amadeo_Souza-Cardoso_%281887-1918%29_%2817385824283%29.jpg\\",\\n        derkovtis_talig=\\"https://upload.wikimedia.org/wikipedia/commons/3/37/Derkovits_Gyula_Talig%C3%A1s_1920.jpg\\",\\n        amadeo_cardoso=\\"https://upload.wikimedia.org/wikipedia/commons/7/7d/Amadeo_de_Souza-Cardoso%2C_1915_-_Landscape_with_black_figure.jpg\\",\\n    )\\n    if value in style_urls:\\n        return style_urls[value]\\n    return value\\n\\n\\n@app.command()\\ndef main(\\n    style_image: str = typer.Option(\\n        ..., \\"--style_image\\", \\"-s\\", callback=style_image_callback\\n    ),\\n    content_image: str = typer.Option(..., \\"--content_image\\", \\"-c\\"),\\n    output_image_size: int = typer.Option(384, \\"--output_image_size\\", \\"-sz\\"),\\n    output_image_path: str = typer.Option(\\"stylized_image.png\\", \\"--output_image_path\\", \\"-o\\"),\\n):\\n    style_image = StyleImage(style_image)\\n    stylized_image = style_image.transfer(content_image, output_image_size=output_image_size)\\n    stylized_image.save(output_image_path)\\n\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n\\n:::note running your scripts using the virtual environment\\nNotice that if you want to execute the `main.py` file or any other file/script using the python environment you just created, you need to run the command `poetry run python main.py.` So, poetry knows that you are running the `main.py` file with the python environment created for the `style_image` package.\\nIf you feel more comfortable running `python main.py,` instead of running `poetry run ...` you can permanently activate the environment running the command `poetry shell.`. So it will be activated for all the commands you run.\\n:::\\n\\nPoetry and pyenv are integrated with `visual studio` code and `Pycharm`. In fact, they will automatically recognize the python environment created by poetry.\\n\\n**Publishing our package to PyPi**\\n\\nPublishing our package in Pypi should be straightforward. We just run the `poetry publish` command. Since this is just a demo, we are going to publish our package to the pypi test repository `https://test.pypi.org/.` However, the steps should be the same in production `https://pypi.org/.`\\n\\n<TermynalReact lines ={[\\n    { type: \'input\', value: \'poetry build\', comment: \\"build package\\" },\\n    { type: \'input\', value: \'poetry config repositories.testpypi https://test.pypi.org/legacy/\', comment: \\"add repository\\" },\\n    { type: \'input\', value: \'poetry config repositories\', comment: \\"list repositories\\" },\\n    { type: \'output\', value: `{\'testpypi\': {\'url\': \'https://test.pypi.org/\'}}`, color: \\"gray\\" },\\n    { type: \'input\', value: \'poetry publish -r testpypi\', comment: \\"publish package to testpypi repository\\" },\\n    { type: \'prompt\', value: \'username : haruiz\'},\\n    { type: \'prompt\', value: \'password\'},\\n    { type: \\"output\\", value: \\"Publishing style_image (0.1.0) to testpypi..\\", color:\\"green\\"}\\n  ]} />\\n\\nIf the `publish` command is successful, you will be able to find the package in the testpypi repository.\\n\\n<div style={{textAlign: \\"center\\"}}>\\n    <Image img={require(\\"./pypi-test.png\\")} alt=\\"Dependency hell\\" />\\n</div>\\n\\nThat is all!! We are done!!. You can check the links below for more information about poetry. \\n\\nThanks for your support and don\'t forget to share,\\n\\n\\n**Some useful resources**\\n- [Poetry Documentation](https://python-poetry.org/)\\n- [Pyenv Documentation](https://github.com/pyenv/pyenv)\\n- [Great talk about poetry](https://www.youtube.com/watch?v=QX_Nhu1zhlg&ab_channel=PyGotham2019)\\n- [Package Python Projects the Proper Way with Poetry](https://hackersandslackers.com/python-poetry-package-manager/)\\n- [Poetry: Finally an all-in-one tool to manage Python packages](https://medium.com/analytics-vidhya/poetry-finally-an-all-in-one-tool-to-manage-python-packages-3c4d2538e828)\\n- [Making Python Packages Part 2: How to Publish & Test Your Package on PyPI with Poetry](https://towardsdatascience.com/packages-part-2-how-to-publish-test-your-package-on-pypi-with-poetry-9fc7295df1a5)\\n- [Publishing to a private Python repository with Poetry](https://medium.com/packagr/publishing-to-a-private-python-repository-with-poetry-23b660484471)\\n- [Python Virtual Environments tutorial using Virtualenv and Poetry](https://serpapi.com/blog/python-virtual-environments-using-virtualenv-and-poetry/)\\n- [The Nine Circles of Python Dependency Hell](https://medium.com/knerd/the-nine-circles-of-python-dependency-hell-481d53e3e025)\\n- [Get started with pyenv & poetry. Saviours in the python chaos!](https://blog.jayway.com/2019/12/28/pyenv-poetry-saviours-in-the-python-chaos/)\\n\\n**References**\\n<ul>\\n <li><a id=\\"wikipedia:1\\" href=\\"https://en.wikipedia.org/wiki/Python_Package_Index\\" target=\\"_blank\\">[1] Python Package Index</a></li>\\n <li><a id=\\"tensorflow-docs:1\\" href=\\"https://www.tensorflow.org/tutorials/generative/style_transfer\\" target=\\"_blank\\">[2] Neural style transfer</a></li>\\n</ul>"}]}')}}]);