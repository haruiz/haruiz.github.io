"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[510],{9582:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var o=t(5893),a=t(1151);const s={title:"Python for Data Science - Exploring the syntax",slug:"python-for-data-science-exploring-the-syntax",image:"https://haruiz.github.io/img/2022-10-26-python-for-data-science-exploring-the-syntax-og-image.jpg",description:"In the last post, we discussed the importance of programming in the data science context and why Python is considered one of the top languages used by data scientists. In this week's post, we will explore the syntax of Python and create a simple program that uses Google Cloud Vision API to detect faces in an image.",authors:["haruiz"],tags:["python","data-science"]},i="What is a computer program?",r={permalink:"/blog/python-for-data-science-exploring-the-syntax",source:"@site/blog/2022-10-26-python-for-data-science-exploring-the-syntax/index.mdx",title:"Python for Data Science - Exploring the syntax",description:"In the last post, we discussed the importance of programming in the data science context and why Python is considered one of the top languages used by data scientists. In this week's post, we will explore the syntax of Python and create a simple program that uses Google Cloud Vision API to detect faces in an image.",date:"2022-10-26T00:00:00.000Z",formattedDate:"October 26, 2022",tags:[{label:"python",permalink:"/blog/tags/python"},{label:"data-science",permalink:"/blog/tags/data-science"}],readingTime:19.465,hasTruncateMarker:!0,authors:[{name:"Henry Ruiz",title:"Blog Author",url:"https://github.com/haruiz",imageURL:"https://github.com/haruiz.png",key:"haruiz"}],frontMatter:{title:"Python for Data Science - Exploring the syntax",slug:"python-for-data-science-exploring-the-syntax",image:"https://haruiz.github.io/img/2022-10-26-python-for-data-science-exploring-the-syntax-og-image.jpg",description:"In the last post, we discussed the importance of programming in the data science context and why Python is considered one of the top languages used by data scientists. In this week's post, we will explore the syntax of Python and create a simple program that uses Google Cloud Vision API to detect faces in an image.",authors:["haruiz"],tags:["python","data-science"]},unlisted:!1,nextItem:{title:"Python for Data Science - Getting started",permalink:"/blog/python-for-data-science-part-getting-started"}},c={authorsImageUrls:[void 0]},l=[{value:"Python syntax",id:"python-syntax",level:2},{value:"Variables",id:"variables",level:3},{value:"Conditional blocks",id:"conditional-blocks",level:3},{value:"Functions",id:"functions",level:3},{value:"Modules",id:"modules",level:3},{value:"Loops",id:"loops",level:3},{value:"Useful Links",id:"useful-links",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["In the ",(0,o.jsx)(n.a,{href:"blog/python-for-data-science-part-getting-started",children:"last post"})," we discussed the importance of programming in the data science context and why Python is considered one of the top languages used by data scientists. In this week's post, we will explore the syntax of Python by creating a simple program that uses Google Cloud Vision API to detect faces in an image."]}),"\n",(0,o.jsx)(n.p,{children:"You will learn today:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"What is a computer program?"}),"\n",(0,o.jsxs)(n.li,{children:["How to write a program in Python?","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Python syntax"}),"\n",(0,o.jsx)(n.li,{children:"How to organize your code in python using functions"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:"What is a REST API, and how to use it?"}),"\n",(0,o.jsx)(n.li,{children:"How to use Google Cloud Vision API to detect faces in an image?"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"So lets started!!!"}),"\n",(0,o.jsx)(n.p,{children:"A computer program is a sequence of instructions we write using a programming language to tell the computer what to do for us. This sequence of instructions contains but is not limited to:\nShow information to the user, ask the user for input, save and recover data in memory/disk, and perform calculations. So, programming languages provide a set of built-in functions and instructions that can be used to accomplish these tasks."}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsx)(n.p,{children:"If we think about programming languages, we can compare them to different idioms we use to communicate with others. We choose the appropriate language based on the application or where our program will run."})}),"\n",(0,o.jsx)(n.h1,{id:"how-to-write-a-program-in-python",children:"How to write a program in Python?"}),"\n",(0,o.jsxs)(n.p,{children:["When we write programs independent of the programming language we decide to use, writing down our algorithm in simple words is always helpful. In a way, we can have a mental model of what our program will be doing and how it will be executed. To do so, we can use Pseudocode, a simplified version of computer programs written in natural or human-readable language that can be easily interpreted. You can check this ",(0,o.jsx)(n.a,{href:"https://cheatography.com/lcheong/cheat-sheets/pseudocode/",children:(0,o.jsx)(n.strong,{children:"cheat sheet"})})," that will help you to write your program in Pseudocode."]}),"\n",(0,o.jsx)(n.admonition,{title:"Algorithm",type:"info",children:(0,o.jsx)(n.p,{children:"Finite set of rules to be followed in calculations or other problem-solving operations, especially by a computer."})}),"\n",(0,o.jsx)(n.p,{children:"So, let's define our pseudocode for our face detection program:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-pseudocode",metastring:"showLineNumbers",children:'VAR image_path as STRING = INPUT("Please provide the path of the image: ")\nIF image_path is empty or image_path dont exist THEN\n    PRINT("image path could not be empty or the image does not exist")\n    EXIT\nENDIF\n\nFUNCTION read_image(image_path) as STRING\n    VAR image_bytes as BYTES = read(image_path)\n    RETURN image_bytes\nENDFUNCTION\n\nFUNCTION detect_faces_on_image(image_bytes as BYTES) as LIST:\n    api_response as LIST = call_face_detection_gcp_api(image_bytes)\n    IF api_response is empty THEN\n        PRINT("No faces found")\n        RETURN\n    faces as LIST = []\n    FOR json_entity in api_response THEN\n        face as DICT = {\n            "confidence": json_entity.confidence,\n            "bounding_box": json_entity.bounding_box,\n            "is_happy" : json_entity.joy_likelihood == "VERY_LIKELY"\n        }\n        faces.append(face)\n    ENDFOR\n    RETURN faces\nENDFUNCTION\n\nimage_bytes = read_image(image_path)\nfaces_list = detect_faces(image_bytes)\ndisplay_detect_faces(faces_list)\n'})}),"\n",(0,o.jsx)(n.p,{children:"As you can see in Pseudocode, we can skip the implementation details of our program. We write down our algorithm using a high-level language, so in this way, we have a big picture of the tasks we need to perform that we can use later to translate our algorithm into a programming language. In line 13, for instance,  we need to call the Google Cloud Vision API to detect the faces in the image, but we have yet to determine how it will be implemented."}),"\n",(0,o.jsx)(n.h2,{id:"python-syntax",children:"Python syntax"}),"\n",(0,o.jsx)(n.p,{children:"To learn about python syntax, we will navigate through the Pseudocode and convert it into a python script."}),"\n",(0,o.jsx)(n.h3,{id:"variables",children:"Variables"}),"\n",(0,o.jsxs)(n.p,{children:["Programming is all about data and manipulating it to solve problems. So, we need to have a way to store data on our computer that we can access later during execution. To do so, we use variables. Variables are a way to store data in memory where we can save almost any data. In Python, it is straightforward to define a variable; we need to use the assignment operator ",(0,o.jsx)(n.code,{children:"="})," followed by the value we want to store, and the Python interpreter will take care of the rest. Under the hood, it will allocate memory for the variable and store its value. We can save strings, integers, floats, booleans, lists, dictionaries, and other data types. Let's see an example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# String\nmy_string = "Hello World"\n# Integer\nmy_integer = 1\n# Float\nmy_float = 1.0\n# Boolean\nmy_boolean = True\n# List\nmy_list = [1, 2, 3]\n# Dictionary\nmy_dict = {"key": "value"}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["We can obtain the memory address and type of a variable using the ",(0,o.jsx)(n.code,{children:"id()"})," and ",(0,o.jsx)(n.code,{children:"type()"})," functions respectively."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'my_string = "Hello World"\nmy_string_2 = "Hello World"\nprint(id(my_string))\nprint(id(my_string_2))\nprint(type(my_string))\nprint(type(my_string_2))\n'})}),"\n",(0,o.jsxs)(n.p,{children:["In our program, in line 1, we define a variable ",(0,o.jsx)(n.code,{children:"image_path"})," and assign it the value of the user input. In Python, the ",(0,o.jsx)(n.code,{children:"input()"})," function allows us to grab information from the user so we can save the value into a variable. Let's see how we can translate this Pseudocode line into Python:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'image_path = input("Please provide the path of the image:")\n'})}),"\n",(0,o.jsx)(n.p,{children:"The syntax is very similar to the Pseudocode. However, you can notice that in Python, we don't specify the variable type. That is because Python is a dynamically typed language, meaning that the variable type is inferred during the execution. In terms of productivity, this is very convenient because we don't need to worry about specifying the type of the variables when we define them. However, it can sometimes be a source of errors if we are not carefully doing operations."}),"\n",(0,o.jsx)(n.p,{children:"Python will raise an error if we try to perform an operation that is not supported by the type of the variable. Let's see an example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"a = 2   \nb = \"2\"\n# error-line-next\nprint(a + b)\n# TypeError: unsupported operand type(s) for +: 'int' and 'str'\n"})}),"\n",(0,o.jsx)(n.admonition,{title:"Rules for creating variables across languages",type:"warning",children:(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"A variable name must start with a letter or an underscore character."}),"\n",(0,o.jsx)(n.li,{children:"A variable name cannot start with a number."}),"\n",(0,o.jsx)(n.li,{children:"A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )."}),"\n",(0,o.jsx)(n.li,{children:"Variable names are case-sensitive (name, Name and NAME are three different variables)."}),"\n",(0,o.jsx)(n.li,{children:"The reserved words(keywords) cannot be used naming the variable."}),"\n"]})}),"\n",(0,o.jsx)(n.h3,{id:"conditional-blocks",children:"Conditional blocks"}),"\n",(0,o.jsxs)(n.p,{children:["A common task in programming is to execute a block of code only if a condition is met. In Python, we can use the ",(0,o.jsx)(n.code,{children:"if"})," statement to do so. Let's see an example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'a = 2\nif a == 2:\n    print("a is equal to 2")\n'})}),"\n",(0,o.jsxs)(n.p,{children:["In the example above, we check if the variable ",(0,o.jsx)(n.code,{children:"a"}),' is equal to 2. If that is the case, we print the message "a is equal to 2". We can also use the ',(0,o.jsx)(n.code,{children:"else"})," statement to execute a block of code if the condition is not met. Let's see an example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'a = 2\nif a == 2:\n    print("a is equal to 2")\nelse:\n    print("a is not equal to 2")\n'})}),"\n",(0,o.jsxs)(n.p,{children:["In our program, we need to check if the user input is empty or if the image path does not exist. We can use the ",(0,o.jsx)(n.code,{children:"if"})," statement to do so. Let's see how we can translate this Pseudocode line into Python:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import os\n\nimage_path = input("Please provide the path of the image:")\nif image_path == "" or not os.path.exists(image_path):\n    print("image path could not be empty or the image does not exist")\n    exit()\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Again, we can observe that the syntax is very similar to the Pseudocode, just with the addition of the ",(0,o.jsx)(n.code,{children:"os.path.exists()"})," function in the condition to check whether a image exists or not. The os module it is included in the Python standard library, and it provides a way to interact with the operating system. We also use the ",(0,o.jsx)(n.code,{children:"exit()"})," function to exit the program in case the condition is met. We are going to discuss about modules later in this article."]}),"\n",(0,o.jsxs)(n.admonition,{title:"Python Standard Library",type:"info",children:[(0,o.jsxs)(n.p,{children:["The Python Standard Library is a set of modules that comes with the Python installation. It provides a wide range of built-in functions and classes that we can use in our programs for different purposes. You can find more information about the Python Standard Library ",(0,o.jsx)(n.a,{href:"https://docs.python.org/3/library/index.html",children:"here"}),"."]}),(0,o.jsx)(n.p,{children:"Some of the most used modules are:"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"os:"})," provides a way to interact with the operating system."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"sys:"})," provides a way to interact with the Python interpreter."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"json:"})," provides a way to work with JSON data."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"re:"})," provides a way to work with regular expressions."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"math:"})," provides a way to work with mathematical operations."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"random:"})," provides a way to work with random numbers."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"datetime:"})," provides a way to work with dates and times."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"urllib:"})," provides a way to work with URLs.It is a very useful module to work with APIs. We are going to use it in the next section to call the Google Cloud Vision API."]}),"\n"]})]}),"\n",(0,o.jsx)(n.h3,{id:"functions",children:"Functions"}),"\n",(0,o.jsxs)(n.p,{children:["Functions are a way to encapsulate a block of code that we can reuse in our program. In Python, we can define a function using the ",(0,o.jsx)(n.code,{children:"def"})," keyword followed by the function name and the parameters. Let's see an example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'def add(a, b):\n    """\n    This function adds two numbers\n    :param a: first number\n    :param b: second number\n    :return: sum of the two numbers\n    """\n    return a + b\n\nif __name__ == "__main__":\n    print(add(1, 2))\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The paremeters are the variables that we need to pass to the function to perform the task. In the example above, we define a function called ",(0,o.jsx)(n.code,{children:"add"})," that takes two parameters ",(0,o.jsx)(n.code,{children:"a"})," and ",(0,o.jsx)(n.code,{children:"b"}),", and the function returns the sum of the values of the two parameters. We can call the function by using the function name followed by the parameters. In the example above, we call the function ",(0,o.jsx)(n.code,{children:"add"})," with the parameters ",(0,o.jsx)(n.code,{children:"1"})," and ",(0,o.jsx)(n.code,{children:"2"}),". The function returns the value ",(0,o.jsx)(n.code,{children:"3"})," and we print it in the console."]}),"\n",(0,o.jsxs)(n.p,{children:["In our program, we have two main functions that we need to implement, ",(0,o.jsx)(n.code,{children:"read_image"})," and ",(0,o.jsx)(n.code,{children:"call_face_detection_gcp_api."})," The first takes the image path as a parameter and returns the image data. The second takes the image data as a parameter, requests the Google Cloud Vision API to detect faces in the image, and returns the face annotations in JSON format. Let's see how we can translate the ",(0,o.jsx)(n.code,{children:"read_image"}),"  function from Pseudocode into Python:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'def read_image(image_path: str) -> bytes:\n    """\n    Read image from file and return as bytes\n    :param image_path: path of the image\n    :return: image as bytes\n    """\n    with open(image_path, "rb") as f:\n        return f.read() # read the image\'s bytes\n'})}),"\n",(0,o.jsxs)(n.p,{children:["There is a new syntax here in the ",(0,o.jsx)(n.code,{children:"read_image"})," function to be discussed."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Function annotations:"})," Although not mandatory, we can specify the parameters' type and the functions' return value in Python. These are called function annotations. Although the Python interpreter does not enforce them, and we still have to check the type of the parameters programmatically,  annotations are extremely useful for other project contributors to navigate through the code and understand how the function must be called. In the example above, we specify that the function takes a string as a parameter and returns a bytes object."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Another good thing about function annotations is that It makes the function more readable and will also helps to avoid errors when function is called in other parts of the program."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Context Managers:"})," It can also be noticed that we use the ",(0,o.jsx)(n.code,{children:"with"})," statement to open the file in the ",(0,o.jsx)(n.code,{children:"read_image"})," function. These blocks of code are called context managers in Python, and in this case, it ensures that the file is closed after the block of code is executed. We will discuss context managers later in other articles since this is an advanced topic. For more information about context managers, you can check the ",(0,o.jsx)(n.a,{href:"https://docs.python.org/3/reference/compound_stmts.html#with",children:"Python documentation"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Encoding:"})," We can also see that we use the ",(0,o.jsx)(n.code,{children:"rb"})," mode to open the file. This mode allows us to read the file as bytes so we can encode it in base64 to send it to the Google Cloud Vision API. That is required because the API only accepts images encoded in this format. For more information about the ",(0,o.jsx)(n.code,{children:"rb"})," mode, you can check the ",(0,o.jsx)(n.a,{href:"https://docs.python.org/3/library/functions.html#open",children:"Python documentation"}),", and face detection API documentation ",(0,o.jsx)(n.a,{href:"https://cloud.google.com/vision/docs/detecting-faces",children:"here"}),"."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.admonition,{title:"Encoding data",type:"info",children:(0,o.jsxs)(n.p,{children:["Encodings are a way to represent a sequence of bytes in a different format. The most common encodings are ASCII, UTF-8, and base64. ASCII is a 7-bit encoding that represents the first 128 characters of Unicode. UTF-8 is a variable-length encoding that represents the first 1,112,064 characters of Unicode. Base64 is a way to represent binary data in ASCII characters and it is used to send binary data in text-based protocols such as HTTP. For more information about encodings, you can check the ",(0,o.jsx)(n.a,{href:"https://docs.python.org/3/library/codecs.html#standard-encodings",children:"Python documentation"}),"."]})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Error handling:"})," In order to catch the errors in our python functions we can use the ",(0,o.jsx)(n.code,{children:"try"})," and ",(0,o.jsx)(n.code,{children:"except"})," block. The ",(0,o.jsx)(n.code,{children:"try"})," statement allows us to execute a block of code and catch the errors that can happen in the ",(0,o.jsx)(n.code,{children:"except"})," statement. A ",(0,o.jsx)(n.code,{children:"finally"})," block can also be used to execute a block of code after the ",(0,o.jsx)(n.code,{children:"try"})," and ",(0,o.jsx)(n.code,{children:"except"})," blocks.\nLet's see how to do this:"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'def read_image(image_path: str) -> bytes:\n    """\n    Read image from file and return as bytes\n    :param image_path: path of the image\n    :return: image as bytes\n    """\n    try:\n        # read and load the image into memory\n        with open(image_path, "rb") as f:\n            return f.read() # read the image\'s bytes\n    except Exception as e:\n        raise Exception("Error reading the image: ", e)\n    finally:\n        print("finally block")\n'})}),"\n",(0,o.jsx)(n.h3,{id:"modules",children:"Modules"}),"\n",(0,o.jsxs)(n.p,{children:["Modules are a way to group a set of functions and classes in our programs. In Python, we can import a module using the ",(0,o.jsx)(n.code,{children:"import"})," keyword followed by the module name."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import os # import the os module\nif __name__ == "__main__":\n    print(os.path.exists("image.jpg"))\n'})}),"\n",(0,o.jsxs)(n.p,{children:["In the example above, we import the ",(0,o.jsx)(n.code,{children:"os"})," module and use the ",(0,o.jsx)(n.code,{children:"os.path.exists()"})," function to check if the file ",(0,o.jsx)(n.code,{children:"image.jpg"})," exists. We can also import a specific function from a module using the ",(0,o.jsx)(n.code,{children:"from"})," keyword. Let's see an example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from os import path\nif __name__ == "__main__":\n    print(path.exists("image.jpg"))\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Following with our example, to implement the ",(0,o.jsx)(n.code,{children:"call_face_detection_gcp_api"})," function, we need to import the ",(0,o.jsx)(n.code,{children:"urllib"})," module. This module provides a set of function we can use to call the Google Cloud Vision API. Let's see how to do this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'import base64\nimport urllib.error\nimport urllib.parse\nimport urllib.request\nimport json\nimport os\n\n\ndef read_image(image_path: str) -> bytes:\n    """\n    Read image from file and return as bytes\n    :param image_path: path of the image\n    :return: image as bytes\n    """\n    # read and load the image into memory\n    with open(image_path, "rb") as f:\n        return f.read() # read the image\'s bytes\n\n\n\ndef image_to_base64(image_bytes: bytes) -> str:\n    """\n    Convert image to base64 string so it can be sent to the API\n    :param image_bytes:\n    :return: base64 string\n    """\n    return base64.b64encode(image_bytes).decode("utf-8")\n\n\ndef call_face_detection_gcp_api(image_bytes: bytes, API_KEY: str = None) -> dict:\n    """\n    Call GCP Face Detection API\n    :param API_KEY: API Key for Google Cloud Platform\n    :param image_bytes: image as bytes\n    :return: response the face annotations as JSON\n    """\n    api_url = f"https://vision.googleapis.com/v1/images:annotate?key={API_KEY}"\n    image_base64 = image_to_base64(image_bytes)\n    request_body = {\n        "requests": [\n            {\n                "image": {\n                    "content": image_base64\n                },\n                "features": [\n                    {\n                        "type": "FACE_DETECTION",\n                        "maxResults": 10\n                    }\n                ]\n            }\n        ]\n    }\n    # Convert request body to JSON format\n    request_body = json.dumps(request_body).encode("utf-8")\n    # Create request\n    request = urllib.request.Request(api_url, data=request_body)\n    # Set request header\n    request.add_header("Content-Type", "application/json")\n    try:\n        # Send request\n        response = urllib.request.urlopen(request)\n        # Read response body as bytes\n        response_body_bytes = response.read()\n        # # Convert response body to JSON format\n        response_body_text = response_body_bytes.decode("utf-8")\n        # Convert response body to JSON format\n        response_body_json = json.loads(response_body_text)\n        # Convert response to JSON format\n        return response_body_json["responses"][0]["faceAnnotations"]\n\n    except urllib.error.HTTPError as e:\n        # Get error message\n        error_message = json.loads(e.read())["error"]["message"]\n        error_code = e.code\n        if e.code == 400:\n            error_status = "Bad Request"\n        elif e.code == 401:\n            error_status = "Unauthorized"\n        elif e.code == 403:\n            error_status = "Forbidden"\n        elif e.code == 404:\n            error_status = "Not Found"\n        elif e.code == 500:\n            error_status = "Internal Server Error"\n        elif e.code == 503:\n            error_status = "Service Unavailable"\n        else:\n            error_status = "Unknown Error"\n\n        raise Exception(f"Error {error_code} calling the GCP Face Detection API: {error_status} - {error_message}")\n'})}),"\n",(0,o.jsxs)(n.p,{children:["For more information about using the ",(0,o.jsx)(n.code,{children:"urlib"})," module, you can check the ",(0,o.jsx)(n.a,{href:"https://docs.python.org/3/library/urllib.request.html",children:"Python documentation"}),"."]}),"\n",(0,o.jsx)(n.admonition,{title:"What is an REST API?",type:"tip",children:(0,o.jsxs)(n.p,{children:["REST stands for Representational State Transfer. It is an architectural style for designing networked applications, that allows to expose data and functionality to external clients in public(wan) or private(lan) networks. Clients could be web applications, mobile applications, or even other services. For more information about REST APIs, you can check the ",(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Representational_state_transfer",children:"Wikipedia page"}),".REST APIs are implemented using HTTP methods. The most common methods are ",(0,o.jsx)(n.code,{children:"GET"}),", ",(0,o.jsx)(n.code,{children:"POST"}),", ",(0,o.jsx)(n.code,{children:"PUT"}),", ",(0,o.jsx)(n.code,{children:"PATCH"}),", and ",(0,o.jsx)(n.code,{children:"DELETE"}),", you can check the ",(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods",children:"Wikipedia page"}),". It also provides standard data formats to send and receive data, for instance ",(0,o.jsx)(n.code,{children:"JSON"})," and ",(0,o.jsx)(n.code,{children:"XML"}),". More information ",(0,o.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages",children:"here"}),"."]})}),"\n",(0,o.jsx)(n.p,{children:"The video below give you a quick overview of how REST APIs work:"}),"\n",(0,o.jsx)("center",{children:(0,o.jsx)("iframe",{width:"100%",height:"400",src:"https://www.youtube.com/embed/7YcW25PHnAA",f:!0,allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0})}),"\n",(0,o.jsx)(n.h3,{id:"loops",children:"Loops"}),"\n",(0,o.jsxs)(n.p,{children:["Loops are a way to execute a block of code multiple times. In Python, we can use the ",(0,o.jsx)(n.code,{children:"for"})," loop to iterate over a list of elements. Let's see an example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"for i in range(10):\n    print(i)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"range"})," function returns a list of numbers from 0 to 10. The ",(0,o.jsx)(n.code,{children:"for"})," loop iterates over the list and prints each element. The ",(0,o.jsx)(n.code,{children:"range"})," function can also receive a start and end value. Let's see an example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"for i in range(5, 10):\n    print(i)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"range"})," function can also receive a step value. Let's see an example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"for i in range(5, 10, 2):\n    print(i)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"for"})," loop can also be used to iterate over a list of elements. Let's see an example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"for i in [1, 2, 3, 4, 5]:\n    print(i)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"for"})," loop can also be used to iterate over a dictionary. Let's see an example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'for key, value in {"a": 1, "b": 2, "c": 3}.items():\n    print(f"key: {key}, value: {value}")\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"for"})," loop can also be used to iterate over a string. Let's see an example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'for char in "Hello World":\n    print(char)\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"while"})," loop is used to execute a block of code while a condition is true. Let's see an example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"i = 0\nwhile i < 10:\n    print(i)\n    i += 1\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In our code in the last function of our script, we need to iterate over the list of faces returned by the API. Let's see how we do this in line ",(0,o.jsx)(n.code,{children:"18"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers {18-23}",children:'def detect_faces_on_image(image_bytes: bytes, API_KEY: str = None) -> list:\n    """\n    Detect faces on image\n    :param API_KEY: API Key for Google Cloud Platform\n    :param image_bytes: image as bytes\n    :return: list of faces found\n    """\n    # Call Google Cloud Platform Face Detection API\n    api_response = call_face_detection_gcp_api(image_bytes, API_KEY)\n\n    # Check if API response is empty\n    if not api_response:\n        print("No faces found")\n        return []  # return empty list\n\n    # Create list to store faces\n    faces = []\n    for json_entity in api_response:\n        face = {\n            "bounding_box": json_entity["boundingPoly"],\n            "is_happy": json_entity["joyLikelihood"] in ["VERY_LIKELY", "LIKELY"],\n        }\n        faces.append(face)\n    return faces\n'})}),"\n",(0,o.jsxs)(n.p,{children:["I skipped the ",(0,o.jsx)(n.code,{children:"call_face_detection_gcp_api"})," function explanation since it was supposed to be an introductory tutorial. However, I have tried my best to comment on the code so you can develop an intuition on what the function does. To get more information about how to call the ",(0,o.jsx)(n.code,{children:"GCP face detection API,"})," you can check the official documentation ",(0,o.jsx)(n.a,{href:"https://cloud.google.com/vision/docs/detecting-faces",children:"here"}),". You must create a Google Cloud Platform account to use the API. To see how to create the project and get the API key, you can check the ",(0,o.jsx)(n.a,{href:"https://cloud.google.com/vision/docs/libraries#client-libraries-install-python",children:"official documentation"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"In the next section, we will see how to do more advance things with Python using third party packages and libraries. For now I will leave you with the full code of the script:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'import base64\nimport urllib.error\nimport urllib.parse\nimport urllib.request\nimport json\nimport os\n\n\ndef read_image(image_path: str) -> bytes:\n    """\n    Read image from file and return as bytes\n    :param image_path: path of the image\n    :return: image as bytes\n    """\n    # read and load the image into memory\n    with open(image_path, "rb") as f:\n        return f.read() # read the image\'s bytes\n\n\ndef image_to_base64(image_bytes: bytes) -> str:\n    """\n    Convert image to base64 string\n    :param image_bytes:\n    :return:\n    """\n    # Convert image to base64 string, so it can be sent to the API\n    return base64.b64encode(image_bytes).decode("utf-8")\n\n\ndef call_face_detection_gcp_api(image_bytes: bytes, API_KEY: str = None) -> dict:\n    """\n    Call Google Cloud Platform Face Detection API\n    :param API_KEY: API Key for Google Cloud Platform\n    :param image_bytes: image as bytes\n    :return:\n    """\n    api_url = f"https://vision.googleapis.com/v1/images:annotate?key={API_KEY}"\n    # Convert image to base64 string, so it can be sent to the API\n    image_base64 = image_to_base64(image_bytes)\n    # Create request body\n    request_body = {\n        "requests": [\n            {\n                "image": {\n                    "content": image_base64\n                },\n                "features": [\n                    {\n                        "type": "FACE_DETECTION",\n                        "maxResults": 10\n                    }\n                ]\n            }\n        ]\n    }\n    # Convert request body to JSON format\n    request_body = json.dumps(request_body).encode("utf-8")\n    # make request\n    request = urllib.request.Request(api_url, data=request_body)\n    # Set request header\n    request.add_header("Content-Type", "application/json")\n    try:\n        # Send request\n        response = urllib.request.urlopen(request)\n        # Read response body as bytes\n        response_body_bytes = response.read()\n        # # Convert response body to JSON format\n        response_body_text = response_body_bytes.decode("utf-8")\n        # Convert response body to JSON format\n        response_body_json = json.loads(response_body_text)\n        # Convert response to JSON format\n        return response_body_json["responses"][0]["faceAnnotations"]\n\n    except urllib.error.HTTPError as e:\n        # Get error message\n        error_message = json.loads(e.read())["error"]["message"]\n        error_code = e.code\n        if e.code == 400:\n            error_status = "Bad Request"\n        elif e.code == 401:\n            error_status = "Unauthorized"\n        elif e.code == 403:\n            error_status = "Forbidden"\n        elif e.code == 404:\n            error_status = "Not Found"\n        elif e.code == 500:\n            error_status = "Internal Server Error"\n        elif e.code == 503:\n            error_status = "Service Unavailable"\n        else:\n            error_status = "Unknown Error"\n        raise Exception(f"Error {error_code} calling the GCP Face Detection API: {error_status} - {error_message}")\n\n\ndef detect_faces_on_image(image_bytes: bytes, API_KEY: str = None) -> list:\n    """\n    Detect faces on image\n    :param API_KEY: API Key for Google Cloud Platform\n    :param image_bytes: image as bytes\n    :return:\n    """\n    # Call Google Cloud Platform Face Detection API\n    api_response = call_face_detection_gcp_api(image_bytes, API_KEY)\n\n    # Check if API response is empty\n    if not api_response:\n        print("No faces found")\n        return []  # return empty list\n\n    # Create list to store faces\n    faces = []\n    for json_entity in api_response:\n        face = {\n            "bounding_box": json_entity["boundingPoly"],\n            "is_happy": json_entity["joyLikelihood"] in ["VERY_LIKELY", "LIKELY"],\n        }\n        faces.append(face)\n    return faces\n\n\ndef main():\n    try:\n        image_path = input("Please provide the path of the image:")\n        assert image_path != "" and os.path.exists(image_path), "image path could not be empty or the image does not exist"\n        # read and return image as bytes\n        image = read_image(image_path)\n        # pass the image to the face detection function to detect faces\n        faces = detect_faces_on_image(image, API_KEY="<GCP API KEY>")\n        # print the number of faces found\n        print("number of faces found:", len(faces))\n        # iterate over the faces and do something\n        for face in faces:\n            print(face["is_happy"])\n    except Exception as e:\n        print(f"Error running the script: {e}")\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,o.jsxs)(n.p,{children:["This is all for this tutorial. I hope you enjoyed it. If you have any questions, please leave a comment below or contact me on LinkedIn. If you want to see more tutorials like this, please subscribe to my newsletter (See top menu). To access the code for this tutorial, you can check the ",(0,o.jsx)(n.a,{href:"https://github.com/haruiz/blog-code/blob/main/python-for-data-science-exploring-the-syntax/main.py",children:"GitHub repository"})]}),"\n",(0,o.jsx)(n.h2,{id:"useful-links",children:"Useful Links"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://cloud.google.com/vision/docs/detecting-faces",children:"GCP Face Detection API"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://cloud.google.com/products/ai",children:"GCP Machine Learning APIs"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://www.pythoncheatsheet.org/",children:"Python Cheat Sheet"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://docs.python.org/3/",children:"Python Documentation"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://docs.python.org/3/tutorial/index.html",children:"Python Tutorial"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://docs.python.org/3/library/index.html",children:"Python Standard Library"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://pypi.org/",children:"Python Package Index"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://www.python.org/about/apps/",children:"Python for Data Science"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://www.youtube.com/watch?v=lsMQRaeKNDk&ab_channel=IBMTechnology",children:"What is a REST API?"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://www.youtube.com/watch?v=iiADhChRriM&ab_channel=IBMTechnology",children:"What is JSON?"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);